<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mufool</title>
  
  <subtitle>my blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mufool.com/"/>
  <updated>2017-09-08T03:45:38.064Z</updated>
  <id>http://mufool.com/</id>
  
  <author>
    <name>Mufool</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java操作redis</title>
    <link href="http://mufool.com/2017/08/25/java-redis/"/>
    <id>http://mufool.com/2017/08/25/java-redis/</id>
    <published>2017-08-25T02:15:10.000Z</published>
    <updated>2017-09-08T03:45:38.064Z</updated>
    
    <content type="html"><![CDATA[<p>连接操作命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">quit：关闭连接（connection）</div><div class="line">auth：简单密码认证</div><div class="line">help cmd： 查看cmd帮助，例如：help quit</div></pre></td></tr></table></figure><a id="more"></a><p>持久化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">save：将数据同步保存到磁盘</div><div class="line">bgsave：将数据异步保存到磁盘</div><div class="line">lastsave：返回上次成功将数据保存到磁盘的Unix时戳</div><div class="line">shundown：将数据同步保存到磁盘，然后关闭服务</div></pre></td></tr></table></figure><p>远程服务控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">info：提供服务器的信息和统计</div><div class="line">monitor：实时转储收到的请求</div><div class="line">slaveof：改变复制策略设置</div><div class="line">config：在运行时配置Redis服务器</div></pre></td></tr></table></figure><p>对value操作的命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">exists(key)：确认一个key是否存在</div><div class="line">del(key)：删除一个key</div><div class="line">type(key)：返回值的类型</div><div class="line">keys(pattern)：返回满足给定pattern的所有key</div><div class="line">randomkey：随机返回key空间的一个</div><div class="line">keyrename(oldname, newname)：重命名key</div><div class="line">dbsize：返回当前数据库中key的数目</div><div class="line">expire：设定一个key的活动时间（s）</div><div class="line">ttl：获得一个key的活动时间</div><div class="line">select(index)：按索引查询</div><div class="line">move(key, dbindex)：移动当前数据库中的key到dbindex数据库</div><div class="line">flushdb：删除当前选择数据库中的所有key</div><div class="line">flushall：删除所有数据库中的所有key</div></pre></td></tr></table></figure><p>String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">set(key, value)：给数据库中名称为key的string赋予值value</div><div class="line">get(key)：返回数据库中名称为key的string的value</div><div class="line">getset(key, value)：给名称为key的string赋予上一次的value</div><div class="line">mget(key1, key2,…, key N)：返回库中多个string的value</div><div class="line">setnx(key, value)：添加string，名称为key，值为value</div><div class="line">setex(key, time, value)：向库中添加string，设定过期时间time</div><div class="line">mset(key N, value N)：批量设置多个string的值</div><div class="line">msetnx(key N, value N)：如果所有名称为key i的string都不存在</div><div class="line">incr(key)：名称为key的string增<span class="number">1</span>操作</div><div class="line">incrby(key, integer)：名称为key的string增加integer</div><div class="line">decr(key)：名称为key的string减<span class="number">1</span>操作</div><div class="line">decrby(key, integer)：名称为key的string减少integer</div><div class="line">append(key, value)：名称为key的string的值附加value</div><div class="line">substr(key, start, end)：返回名称为key的string的value的子串</div></pre></td></tr></table></figure><p>List</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">rpush(key, value)：在名称为key的list尾添加一个值为value的元素</div><div class="line">lpush(key, value)：在名称为key的list头添加一个值为value的 元素</div><div class="line">llen(key)：返回名称为key的list的长度</div><div class="line">lrange(key, start, end)：返回名称为key的list中start至end之间的元素</div><div class="line">ltrim(key, start, end)：截取名称为key的list</div><div class="line">lindex(key, index)：返回名称为key的list中index位置的元素</div><div class="line">lset(key, index, value)：给名称为key的list中index位置的元素赋值</div><div class="line">lrem(key, count, value)：删除count个key的list中值为value的元素</div><div class="line">lpop(key)：返回并删除名称为key的list中的首元素</div><div class="line">rpop(key)：返回并删除名称为key的list中的尾元素</div><div class="line">blpop(key1, key2,… key N, timeout)：lpop命令的block版本。</div><div class="line">brpop(key1, key2,… key N, timeout)：rpop的block版本。</div><div class="line">rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部</div></pre></td></tr></table></figure><p>Set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">sadd(key, member)：向名称为key的set中添加元素member</div><div class="line">srem(key, member) ：删除名称为key的set中的元素member</div><div class="line">spop(key) ：随机返回并删除名称为key的set中一个元素</div><div class="line">smove(srckey, dstkey, member) ：移到集合元素</div><div class="line">scard(key) ：返回名称为key的set的基数</div><div class="line">sismember(key, member) ：member是否是名称为key的set的元素</div><div class="line">sinter(key1, key2,…key N) ：求交集</div><div class="line">sinterstore(dstkey, (keys)) ：求交集并将交集保存到dstkey的集合</div><div class="line">sunion(key1, (keys)) ：求并集</div><div class="line">sunionstore(dstkey, (keys)) ：求并集并将并集保存到dstkey的集合</div><div class="line">sdiff(key1, (keys)) ：求差集</div><div class="line">sdiffstore(dstkey, (keys)) ：求差集并将差集保存到dstkey的集合</div><div class="line">smembers(key) ：返回名称为key的set的所有元素</div><div class="line">srandmember(key) ：随机返回名称为key的set的一个元素</div></pre></td></tr></table></figure><p>Hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">hset(key, field, value)：向名称为key的hash中添加元素field</div><div class="line">hget(key, field)：返回名称为key的hash中field对应的value</div><div class="line">hmget(key, (fields))：返回名称为key的hash中field i对应的value</div><div class="line">hmset(key, (fields))：向名称为key的hash中添加元素field</div><div class="line">hincrby(key, field, integer)：将名称为key的hash中field的value增加integer</div><div class="line">hexists(key, field)：名称为key的hash中是否存在键为field的域</div><div class="line">hdel(key, field)：删除名称为key的hash中键为field的域</div><div class="line">hlen(key)：返回名称为key的hash中元素个数</div><div class="line">hkeys(key)：返回名称为key的hash中所有键</div><div class="line">hvals(key)：返回名称为key的hash中所有键对应的value</div><div class="line">hgetall(key)：返回名称为key的hash中所有的键（field）及其对应的value</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;连接操作命令&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;quit：关闭连接（connection）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;auth：简单密码认证&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;help cmd： 查看cmd帮助，例如：help quit&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://mufool.com/tags/JAVA/"/>
    
      <category term="REDIS" scheme="http://mufool.com/tags/REDIS/"/>
    
  </entry>
  
  <entry>
    <title>几种基本排序算法</title>
    <link href="http://mufool.com/2017/08/25/sort/"/>
    <id>http://mufool.com/2017/08/25/sort/</id>
    <published>2017-08-25T01:59:34.000Z</published>
    <updated>2017-09-08T03:45:38.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>每一轮从头开始两两比较，将较大的项放在较小项的右边，这样每轮下来保证该轮最大的数在最右边。</p><a id="more"></a><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] source)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = source.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j ++) &#123;</div><div class="line">                <span class="keyword">if</span>(source[j] &gt; source[j+<span class="number">1</span>]) &#123;</div><div class="line">                    swap(source, j, j + <span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="算法示例"><a href="#算法示例" class="headerlink" title="算法示例"></a>算法示例</h3><p>待排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">13 6 29 3</div></pre></td></tr></table></figure></p><p>排序过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1:6 13 3 29 //13和6，交换；13和29，不交换；29和3，交换</div><div class="line">2:6 3 13 29 //6和13，不交换；13和3，交换</div><div class="line">3:3 6 13 29 //6和3，交换</div></pre></td></tr></table></figure></p><p>冒泡排序算法还有个可以改进的地方，就是在算法中加入一个布尔变量标识该轮有没有进行数据的交换，若在某一次排序中未发现气泡位置的交换，则说明待排序的无序区中所有的项均已满足排序后的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] source)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = source.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">boolean</span> exchange = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j ++) &#123;</div><div class="line">                <span class="keyword">if</span>(source[j] &gt; source[j+<span class="number">1</span>]) &#123;</div><div class="line">                    swap(source, j, j + <span class="number">1</span>);</div><div class="line">                    exchange = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!exchange) <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><ul><li>时间复杂度：冒泡排序最好的情况是初始状态是正序的，一次扫描即可完成排序，所以最好的时间复杂度为O(N)；最坏的情况是反序的，此时最坏的时间复杂度为O(N2)。平均情况，每轮N/2次循环，N轮时间复杂度为O(N2)。</li><li>稳定性：算法是稳定的，因为当a=b时，由于只有大于才做交换，故a和b的位置没有机会交换，所以算法稳定。</li><li>空间复杂度：空间复杂度为O(1)，不需要额外空间。</li></ul><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h3><p>选择排序改进了冒泡排序，将必要的交换次数从O(n2)减少到O(n)，但是比较次数仍保持为O(n2)。冒泡排序每比较一次就可能交换一次，但是选择排序是将一轮比较完后，把最小的放到最前的位置（或者把最大的放到最后）。</p><h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] source)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> min;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; source.length - <span class="number">1</span>; i++) &#123;</div><div class="line">            min = i;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; source.length; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(source[j] &lt;source[min])</div><div class="line">                    min = j;</div><div class="line">            &#125;</div><div class="line">            swap(source, i, min);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="算法示例-1"><a href="#算法示例-1" class="headerlink" title="算法示例"></a>算法示例</h3><p>待排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">13 6 29 3</div></pre></td></tr></table></figure></p><p>排序过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1:3 6 29 13 //第一遍，3最小，13和3交换</div><div class="line">2:3 6 29 13 //第二遍，6最小，不需要交换</div><div class="line">3:3 6 13 29 //第三遍，13最小，交换</div></pre></td></tr></table></figure></p><h3 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h3><ul><li>时间复杂度：选择排序最好和最坏的情况一样运行了O(N2)时间，但是选择排序无疑更快，因为它进行的交换少得多，当N值较小时，特别是如果交换时间比比较时间大得多时，选择排序实际上是相当快的。平均复杂度也是O(N2)。</li><li>稳定性：算法是不稳定的，假设a=b，且a在b前面，而某轮循环中最小值在b后面，而次最小值需要跟a交换，这时候b就在a前面了，所以选择排序是不稳定的。</li><li>空间复杂度：空间复杂度为O(1)，不需要额外的空间。</li></ul><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="基本原理-2"><a href="#基本原理-2" class="headerlink" title="基本原理"></a>基本原理</h3><p>插入排序的实现步骤为：从第一个元素开始，该元素可以认为已经被排序 -&gt; 取出下一个元素，在已经排序的元素序列中从后向前扫描 -&gt; 如果该元素小于前一个元素，则将两者调换，再与前一个元素比较–&gt; 重复第三步，直到找到已排序的元素小于或者等于新元素的位置 -&gt; 将新元素插入到该位置中 -&gt; 重复第二步</p><h3 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] source)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; source.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; (j &gt; <span class="number">0</span>) &amp;&amp; (source[j] &lt; source[j-<span class="number">1</span>]); j--) &#123;</div><div class="line">                swap(source, j, j-<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            sortNum ++;</div><div class="line">            print(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="算法示例-2"><a href="#算法示例-2" class="headerlink" title="算法示例"></a>算法示例</h3><p>待排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">13 6 29 3</div></pre></td></tr></table></figure></p><p>排序过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1:6 13 29 3 //第一遍，位置2开始，13比6大，不需要交换</div><div class="line">2:6 13 29 3 //第二遍，29分别比13和6大，不需要交换</div><div class="line">3:3 6 13 29 //第三遍，3比29小，交换；3比13小，交换；3比6小，交换</div></pre></td></tr></table></figure></p><h3 id="算法分析-2"><a href="#算法分析-2" class="headerlink" title="算法分析"></a>算法分析</h3><ul><li>时间复杂度：插入排序最好的情况是序列已经是升序排列了，在这种情况下，需要进行N-1次比较即可，时间复杂度为O(N)，最坏的情况是序列降序排列，这时候时间复杂度为O(N2)。因此插入排序不适合对于数据量比较大的排序应用。但是如果需要排序的数据量很小(如小于千)，那么插入排序还是一个不错的选择。插入排序平均时间复杂度为O(N2)，但是它要比冒泡排序快一倍，比选择排序还要快一点，经常被用在较复杂的排序算法的最后阶段，例如快速排序。</li><li>稳定性：算法是稳定的，假设a=b，且a在b的前面，其排序位置必然比b先确定，而后面再插入b时，必然在a的后面，所以是稳定的。</li><li>空间复杂度：空间复杂度为O(1)，不需要额外的空间。</li></ul><p>注：冒泡最大的，选择最小的，插入到已排好序的</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="基本原理-3"><a href="#基本原理-3" class="headerlink" title="基本原理"></a>基本原理</h3><p>希尔排序是基于插入排序的，插入排序有个弊端，假设一个很小的数据项在很靠近右端的位置上，那么所有的中间数据项都必须向右移动一位，这个步骤对每一个数据项都执行了将近N次的复制，这也是插入排序效率为O(N2)的原因。</p><p>希尔排序的中心思想是将数据进行分组，然后对每一组数据进行插入排序，在每一组数据都有序后，再对所有的分组利用插入排序进行最后一次排序。这样可以显著减少数据交换的次数，以达到加快排序速度的目的。</p><h3 id="算法实现-3"><a href="#算法实现-3" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] source)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> nElem = source.length;</div><div class="line">        <span class="keyword">while</span>(h &lt;= nElem / <span class="number">2</span>) &#123;</div><div class="line">            h = h * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(h &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = h; i &lt; nElem; i++) &#123;</div><div class="line">                <span class="comment">//insert sort</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; nElem; j += h) &#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j; (k - h &gt;= <span class="number">0</span>) &amp;&amp; source[k] &lt; source[k - h]; k -= h) &#123;</div><div class="line">                        swap(source, k, k - h);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            h = (h-<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>这种思想需要依赖一个增量序列，我们称为n-增量，n表示进行排序时数据项之间的间隔，习惯上用h表示。增量序列在希尔排序中是很重要的。一般好的增量序列都有2个共同的特征： 最后一个增量必须为1，保证最后一趟是一次普通的插入排序；应该尽量避免序列中的值（尤其是相邻的值）互为倍数的情况</p><h3 id="算法示例-3"><a href="#算法示例-3" class="headerlink" title="算法示例"></a>算法示例</h3><p>待排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">13 6 29 3 38</div></pre></td></tr></table></figure></p><p>排序过程，这里选取的间隔为3和1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1:3 6 29 13 38 // 间隔为3，13和3，交换</div><div class="line">2:3 6 29 13 38 // 间隔为3，6和38不交换</div><div class="line">3:3 6 29 13 38 // 间隔为1，3和6不交换</div><div class="line">4:3 6 29 13 38 // 间隔为1，29用插入排序比6，3都大，不交换</div><div class="line">5:3 6 13 29 38 // 间隔为1，13通过插入排序和29交换，后面都类普通插入排序，省略</div><div class="line">...</div></pre></td></tr></table></figure></p><h3 id="算法分析-3"><a href="#算法分析-3" class="headerlink" title="算法分析"></a>算法分析</h3><ul><li>时间复杂度：希尔排序时间复杂度平均为O(NlogN)，最好与最坏情况要根据具体的增量序列来判断，对于不同的增量序列有不同的复杂度。希尔排序的性能优于直接插入排序，因为在希尔排序开始时增量较大，分组较多，每组的记录数目少，故各组内直接插入较快，后来随着增量逐渐缩小，分组数逐渐减少，而各组的记录数目逐渐增多，但是由于已经局部排过序了，所以已经接近有序状态，新的一趟排序过程也较快。因此，希尔排序在效率上较直接插入排序有较大的改进。</li><li>稳定性：希尔排序是不稳定的，因为不同的间隔对应的数据是独自比较的，如果a=b，但是不在同一个间隔上，显然会出现前后颠倒的情况，所以希尔排序是不稳定的。</li><li>空间复杂度： 空间复杂度为O(1)，不需要额外的存储空间。</li></ul><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="基本原理-4"><a href="#基本原理-4" class="headerlink" title="基本原理"></a>基本原理</h3><p>快速排序本质上通过一个数组划分为两个子数组，然后递归地调用自身为每一个子数组进行快速排序来实现的，即算法分为三步：</p><ol><li>把数组或者子数组划分为左边（较小的关键字）的一组和右边（较大的关键字）的一组；</li><li>调用自身对左边的一组进行排序；</li><li>调用自身对右边的一组进行排序。</li></ol><p>快速排序需要划分数组，这就用到了划分算法。划分算法是由两个指针开始工作，两个指针分别指向数组的两头，左边的指针leftPtr向右移动，右边的指针rightPtr向左移动。当leftPtr遇到比枢纽（待比较的数据项，比其小的在其左边，比其大的在其右边，下面均称之为“枢纽”）小的数据项时继续右移，当遇到比枢纽大的数据项时就停下来；类似的rightPtr想反。两边都停下后，leftPtr和rightPtr都指在数组的错误一方的位置的数据项，交换这两个数据项。交换后继续移动这两个指针。</p><h3 id="算法实现-4"><a href="#算法实现-4" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">        recQuickSort(a,<span class="number">0</span>, a.length-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recQuickSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(right-left &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> pivot = a[right]; <span class="comment">//保存最右边的值，以这个值作为划分点</span></div><div class="line">            <span class="keyword">int</span> partition = partitionIt(a,left, right, pivot);<span class="comment">//将数组划分两部分，并将划分点的值放在正确位置，并返回该位置</span></div><div class="line">            recQuickSort(a, left, partition-<span class="number">1</span>);<span class="comment">//调用自身对左边进行排序</span></div><div class="line">            recQuickSort(a, partition+<span class="number">1</span>, right);<span class="comment">//调用自身对右边进行排序</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partitionIt</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> pivot)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> leftPtr = left - <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> rightPtr = right;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">while</span>(a[++leftPtr] &lt; pivot)&#123;&#125; <span class="comment">//从左到右，找比待比较大的</span></div><div class="line">            <span class="keyword">while</span>(rightPtr &gt; <span class="number">0</span> &amp;&amp; a[--rightPtr] &gt; pivot)&#123;&#125; <span class="comment">//从右到左，找比待比较的小的</span></div><div class="line">            <span class="keyword">if</span>(leftPtr &gt;= rightPtr) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                Logs.info(a[leftPtr] + <span class="string">" "</span> + a[rightPtr]);</div><div class="line">                swap(a, leftPtr, rightPtr);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Logs.info(a[leftPtr] + <span class="string">" "</span> + a[right]);</div><div class="line">        swap(a, leftPtr, right);<span class="comment">//将划分放在正确的位置</span></div><div class="line">        print(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> leftPtr;<span class="comment">//返回划分点，用于再次小范围划分</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="算法示例-4"><a href="#算法示例-4" class="headerlink" title="算法示例"></a>算法示例</h3><p>待比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source = &#123;13,6,29, 3, 15&#125;</div></pre></td></tr></table></figure></p><p>排序过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1:13 6 3 15 29 // 左边比15大的为29，右边比15小的为3，29和3，交换；重复，直到左右位置相同，记录位置</div><div class="line">2:3 6 13 15 29 // 上一步中位置3为中间位置，13,6,3，重复上面步骤</div><div class="line">3:3 6 13 15 29 // 右边15,19 重复第一步</div></pre></td></tr></table></figure></p><h3 id="算法分析-4"><a href="#算法分析-4" class="headerlink" title="算法分析"></a>算法分析</h3><ul><li>时间复杂度：平均时间复杂度为O(NlogN)，最坏的情况下退化成插入排序了，为O(N2)。</li><li>稳定性：不稳定的排序方法。</li><li>空间复杂度：空间复杂度平均为O(logN)，空间复杂度主要是由于递归造成的。</li></ul><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="基本原理-5"><a href="#基本原理-5" class="headerlink" title="基本原理"></a>基本原理</h3><p> 归并排序的思想是把一个数组分成两半，排序每一半。然后用merge方法将数组的两半归并成一个有序的数组。被分的每一半使用递归，再次划分排序，直到得到的子数组只含有一个数据项为止。</p><h3 id="算法实现-5"><a href="#算法实现-5" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] source)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] workSpace = <span class="keyword">new</span> <span class="keyword">int</span>[source.length];</div><div class="line">        recMergeSort(source,workSpace, <span class="number">0</span>, source.length-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recMergeSort</span><span class="params">(<span class="keyword">int</span>[] source, <span class="keyword">int</span>[] workSpace, <span class="keyword">int</span> lowerBound, <span class="keyword">int</span> upperBound)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(lowerBound == upperBound) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> mid = (lowerBound + upperBound) / <span class="number">2</span>;</div><div class="line">            recMergeSort(source, workSpace, lowerBound, mid); <span class="comment">//左边排</span></div><div class="line">            recMergeSort(source, workSpace, mid+<span class="number">1</span>, upperBound); <span class="comment">//右边排</span></div><div class="line">            merge(source, workSpace, lowerBound, mid+<span class="number">1</span>, upperBound);<span class="comment">//归并</span></div><div class="line">            print(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] workSpace, <span class="keyword">int</span> lowPtr, <span class="keyword">int</span> highPtr, <span class="keyword">int</span> upperBound)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> lowerBound = lowPtr;</div><div class="line">        <span class="keyword">int</span> mid = highPtr - <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> n = upperBound - lowerBound + <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(lowPtr &lt;= mid &amp;&amp; highPtr &lt;= upperBound) &#123;</div><div class="line">            <span class="keyword">if</span>(a[lowPtr] &lt; a[highPtr]) &#123;</div><div class="line">                workSpace[j++] = a[lowPtr++];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                workSpace[j++] = a[highPtr++];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(lowPtr &lt;= mid) &#123;</div><div class="line">            workSpace[j++] = a[lowPtr++];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(highPtr &lt;= upperBound) &#123;</div><div class="line">            workSpace[j++] = a[highPtr++];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">            a[lowerBound + j] = workSpace[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="算法示例-5"><a href="#算法示例-5" class="headerlink" title="算法示例"></a>算法示例</h3><p>待排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">13 6 29 3 15</div></pre></td></tr></table></figure></p><p>排序过程，先分为两堆，13,6,29一个数组，3,15一个数组；13,6,29再分为，13,6和29<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1:6 13 29 3 15 // 13和6排序</div><div class="line">2:6 13 29 3 15 // 6，13，29排序</div><div class="line">3:6 13 29 3 15 // 3，15排序</div><div class="line">4:3 6 13 15 29 // 两个数组合并</div></pre></td></tr></table></figure></p><h3 id="算法分析-5"><a href="#算法分析-5" class="headerlink" title="算法分析"></a>算法分析</h3><ul><li>时间复杂度：归并排序的运行时间最差、最好和平均都是O(NlogN)</li><li>稳定性：归并排序是稳定的，由于没有发生数据交换</li><li>空间复杂度：空间复杂度为O(N)</li></ul><h2 id="二叉树排序"><a href="#二叉树排序" class="headerlink" title="二叉树排序"></a>二叉树排序</h2><h3 id="基本原理-6"><a href="#基本原理-6" class="headerlink" title="基本原理"></a>基本原理</h3><p>二叉树排序就是利用二叉搜索树的特点进行排序，二叉搜索树的特点是，左子节点比自己小，右子节点比自己大，那么二叉树排序的思想就是先将待排序序列逐个添加到二叉搜索树中去，再通过中序遍历二叉搜索树就可以将数据从小到大取出来。</p><h3 id="算法实现-6"><a href="#算法实现-6" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;  </div><div class="line">    Node leftChild;  </div><div class="line">    Node rightChild;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;  </div><div class="line">        value = val;  </div><div class="line">    &#125;  </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree2Sort</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> Node root;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tree2Sort</span><span class="params">()</span> </span>&#123;  </div><div class="line">        root = <span class="keyword">null</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getRoot</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> root;  </div><div class="line">    &#125; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] source)</span> </span>&#123;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; source.length; i++) &#123;  </div><div class="line">            <span class="keyword">int</span> value = source[i];  </div><div class="line">            Node node = <span class="keyword">new</span> Node(value);  </div><div class="line">            <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;  </div><div class="line">                root = node;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span> &#123;  </div><div class="line">                Node current = root;  </div><div class="line">                Node parent;  </div><div class="line">                <span class="keyword">boolean</span> insertedOK = <span class="keyword">false</span>;  </div><div class="line">                <span class="keyword">while</span>(!insertedOK) &#123;  </div><div class="line">                    parent = current;  </div><div class="line">                    <span class="keyword">if</span>(value &lt; current.value) &#123;  </div><div class="line">                        current = current.leftChild;  </div><div class="line">                        <span class="keyword">if</span>(current == <span class="keyword">null</span>) &#123;  </div><div class="line">                            parent.leftChild = node;  </div><div class="line">                            insertedOK = <span class="keyword">true</span>;  </div><div class="line">                        &#125;  </div><div class="line">                    &#125;  </div><div class="line">                    <span class="keyword">else</span> &#123;  </div><div class="line">                        current = current.rightChild;  </div><div class="line">                        <span class="keyword">if</span>(current == <span class="keyword">null</span>) &#123;  </div><div class="line">                            parent.rightChild = node;  </div><div class="line">                            insertedOK = <span class="keyword">true</span>;  </div><div class="line">                        &#125;  </div><div class="line">                    &#125;  </div><div class="line">                &#125;  </div><div class="line">                  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node current)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span>(current != <span class="keyword">null</span>) &#123;  </div><div class="line">            inOrder(current.leftChild);  </div><div class="line">            System.out.print(current.value + <span class="string">" "</span>);  </div><div class="line">            inOrder(current.rightChild);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="算法示例-6"><a href="#算法示例-6" class="headerlink" title="算法示例"></a>算法示例</h3><p>略</p><h3 id="算法分析-6"><a href="#算法分析-6" class="headerlink" title="算法分析"></a>算法分析</h3><ul><li>时间复杂度：二叉树的插入时间复杂度为O(logN)，所以二叉树排序算法的时间复杂度为O(NlogN)，</li><li>稳定性：稳定</li><li>空间复杂度：空间复杂度为O(N)</li></ul><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><h3 id="基本原理-7"><a href="#基本原理-7" class="headerlink" title="基本原理"></a>基本原理</h3><p>堆是一个完全二叉树，节点大于或等于自己的子节点。堆排序就是利用完全二叉树的结构将待排序的数据项依次添加到堆中，建立大根堆或者小根堆，从堆中取出的数据项是从大到小或从小到大排列的。因为根节点永远是最大或最小的，而堆中永远是取根节点。</p><h3 id="算法实现-7"><a href="#算法实现-7" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] array;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> currentIndex;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxSize;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setHeapSort</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        maxSize = size;</div><div class="line">        array = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</div><div class="line">        currentIndex = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] source)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; source.length; i++) &#123;</div><div class="line">            array[currentIndex] = source[i]; <span class="comment">//插入到节点尾</span></div><div class="line">            tickedUp(currentIndex++); <span class="comment">//向上重新排好序，使得满足堆的条件</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tickedUp</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> parentIndex = (index - <span class="number">1</span>) / <span class="number">2</span>; <span class="comment">//父节点的索引</span></div><div class="line">        <span class="keyword">int</span> temp = array[index]; <span class="comment">//将新加的尾节点存在temp中</span></div><div class="line">        <span class="keyword">while</span>(index &gt; <span class="number">0</span> &amp;&amp; array[parentIndex] &lt; temp) &#123;</div><div class="line">            array[index] = array[parentIndex];</div><div class="line">            index = parentIndex;</div><div class="line">            parentIndex = (index - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        array[index] = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> maxNum = array[<span class="number">0</span>];</div><div class="line">        array[<span class="number">0</span>] = array[--currentIndex];</div><div class="line">        trickleDown(<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> maxNum;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">trickleDown</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> top = array[index];</div><div class="line">        <span class="keyword">int</span> largeChildIndex;</div><div class="line">        <span class="keyword">while</span>(index &lt; currentIndex/<span class="number">2</span>) &#123; <span class="comment">//while node has at least one child</span></div><div class="line">            <span class="keyword">int</span> leftChildIndex = <span class="number">2</span> * index + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> rightChildIndex = leftChildIndex + <span class="number">1</span>;</div><div class="line">            <span class="comment">//find larger child</span></div><div class="line">            <span class="keyword">if</span>(rightChildIndex &lt; currentIndex &amp;&amp;  <span class="comment">//rightChild exists?</span></div><div class="line">                    array[leftChildIndex] &lt; array[rightChildIndex]) &#123;</div><div class="line">                largeChildIndex = rightChildIndex;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                largeChildIndex = leftChildIndex;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(top &gt;= array[largeChildIndex]) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            array[index] = array[largeChildIndex];</div><div class="line">            index = largeChildIndex;</div><div class="line">        &#125;</div><div class="line">        array[index] = top;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">int</span>[] source = &#123;<span class="number">13</span>,<span class="number">6</span>,<span class="number">29</span>, <span class="number">3</span>, <span class="number">15</span>&#125;;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        setHeapSort(<span class="number">5</span>);</div><div class="line">        insertSort(source);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxSize; i ++) &#123;</div><div class="line">            Logs.info(getMax());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="算法示例-7"><a href="#算法示例-7" class="headerlink" title="算法示例"></a>算法示例</h3><p>略</p><h3 id="算法分析-7"><a href="#算法分析-7" class="headerlink" title="算法分析"></a>算法分析</h3><ul><li>时间复杂度：堆中插入和取出的时间复杂度均为O(logN)，所以堆排序算法的时间复杂度为O(NlogN)</li><li>稳定性：稳定</li><li>空间复杂度：空间复杂度为O(N)</li></ul><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h3 id="基本原理-8"><a href="#基本原理-8" class="headerlink" title="基本原理"></a>基本原理</h3><p>基于有向图的排序，见<a href="http://blog.csdn.net/eson_15/article/details/51194219" target="_blank" rel="external">拓扑排序</a></p><p><a href="http://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="external">动图演示</a></p><p>参考：<br><a href="http://blog.csdn.net/eson_15/article/details/51952328" target="_blank" rel="external">常用数据结构和算法操作效率的对比总结</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;h3 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h3&gt;&lt;p&gt;每一轮从头开始两两比较，将较大的项放在较小项的右边，这样每轮下来保证该轮最大的数在最右边。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://mufool.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Cookie和Session原理</title>
    <link href="http://mufool.com/2017/08/25/cookie-session/"/>
    <id>http://mufool.com/2017/08/25/cookie-session/</id>
    <published>2017-08-25T01:56:26.000Z</published>
    <updated>2017-09-08T03:45:38.063Z</updated>
    
    <content type="html"><![CDATA[<p>Cookie和Session是为了在无状态的HTTP协议之上维护会话状态，使得服务器可以知道当前是和哪个客户在打交道。本文来详细讨论Cookie和Session的实现机制，以及其中涉及的安全问题。</p><a id="more"></a><p>因为HTTP协议是无状态的，即每次用户请求到达服务器时，HTTP服务器并不知道这个用户是谁、是否登录过等。现在的服务器之所以知道我们是否已经登录，是因为服务器在登录时设置了浏览器的Cookie。Session则是借由Cookie而实现的更高层的服务器与浏览器之间的会话。</p><h2 id="Cookie-的实现机制"><a href="#Cookie-的实现机制" class="headerlink" title="Cookie 的实现机制"></a>Cookie 的实现机制</h2><p>Cookie是由客户端保存的小型文本文件，其内容为一系列的键值对。 Cookie是由HTTP服务器设置的，保存在浏览器中， 在用户访问其他页面时，会在HTTP请求中附上该服务器之前设置的Cookie。 那么Cookie是怎样工作的呢？下面给出整个Cookie的传递流程：</p><ol><li>浏览器向某个URL发起HTTP请求</li><li>对应的服务器收到该HTTP请求，并计算应当返回给浏览器的HTTP响应。</li><li>在响应头加入Set-Cookie字段，它的值是要设置的Cookie。</li><li>浏览器收到来自服务器的HTTP响应。</li><li>浏览器在响应头中发现Set-Cookie字段，就会将该字段的值保存在内存或者硬盘中。Set-Cookie字段的值可以是很多项Cookie，每一项都可以指定过期时间Expires。 默认的过期时间是用户关闭浏览器时。</li><li>浏览器下次给该服务器发送HTTP请求时， 会将服务器设置的Cookie附加在HTTP请求的头字段Cookie中。浏览器可以存储多个域名下的Cookie，但只发送当前请求的域名曾经指定的Cookie， 这个域名也可以在Set-Cookie字段中指定）。</li><li>服务器收到这个HTTP请求，发现请求头中有Cookie字段， 便知道之前就和这个用户打过交道了。</li></ol><p>总之，服务器通过Set-Cookie响应头字段来指示浏览器保存Cookie， 浏览器通过Cookie请求头字段来告诉服务器之前的状态。 Cookie中包含若干个键值对，每个键值对可以设置过期时间。</p><h2 id="Cookie-的安全隐患和防篡改"><a href="#Cookie-的安全隐患和防篡改" class="headerlink" title="Cookie 的安全隐患和防篡改"></a>Cookie 的安全隐患和防篡改</h2><p>发送HTTP请求的不只是浏览器，很多HTTP客户端软件（包括curl、Node.js）都可以发送任意的HTTP请求，可以设置任何头字段。 假如我们直接设置Cookie字段并发送HTTP请求， 就可以欺骗服务器岂，这种攻击非常容易，Cookie是可以被篡改的！</p><p>为加强安全，服务器可以单独为每个Cookie项生成签名，由于用户篡改Cookie后无法生成对应的签名， 服务器便可以得知用户对Cookie进行了篡改。</p><p>例如，<code>Set-Cookie: authed=false|6hTiBl7lVpd1P</code>为authed项为false时生成一个加密的签名，客户端可以随意篡改authed字段，但是无法生成authed为false时的签名，服务端校验失败。</p><p>但是因为Cookie是明文传输的， 只要服务器设置过一次authed=true|xxxx我不就知道true的签名是xxxx了么， 以后就可以用这个签名来欺骗服务器了。因此Cookie中最好不要放敏感数据。 一般来讲Cookie中只会放一个Session Id，而Session存储在服务器端。</p><h2 id="Session-的实现机制"><a href="#Session-的实现机制" class="headerlink" title="Session 的实现机制"></a>Session 的实现机制</h2><p>Session 是存储在服务器端的，避免了在客户端Cookie中存储敏感数据。 Session 可以存储在HTTP服务器的内存中，也可以存在内存数据库（如redis）中， 对于重量级的应用甚至可以存储在数据库中。</p><ol><li>用户提交包含用户名和密码的表单，发送HTTP请求。</li><li>服务器验证用户发来的用户名密码。如果正确则把当前用户名（通常是用户对象）存储到redis中，并生成它在redis中的ID。</li><li>设置Cookie为sessionId=xxxxxx|checksum并发送HTTP响应， 仍然为每一项Cookie都设置签名。</li><li>用户收到HTTP响应后，便看不到任何敏感数据了。在此后的请求中发送该Cookie给服务器。</li><li>服务器收到此后的HTTP请求后，发现Cookie中有SessionID，进行放篡改验证。</li><li>如果通过了验证，根据该ID从Redis中取出对应的用户对象， 查看该对象的状态并继续执行业务逻辑。<br>Web应用框架都会实现上述过程，在Web应用中可以直接获得当前用户。 相当于在HTTP协议之上，通过Cookie实现了持久的会话。这个会话便称为Session。</li></ol><h2 id="flask中cookie和session的使用"><a href="#flask中cookie和session的使用" class="headerlink" title="flask中cookie和session的使用"></a>flask中cookie和session的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">main.secret_key = <span class="string">'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'</span></div><div class="line"></div><div class="line"><span class="meta">@main.route('/add')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">    res = make_response(render_template(<span class="string">"index.html"</span>))</div><div class="line">    res.set_cookie(key=<span class="string">'username'</span>, value=<span class="string">'letian'</span>)</div><div class="line">    session[<span class="string">'name'</span>] = <span class="string">'tom'</span></div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"><span class="meta">@main.route('/show')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> request.cookies.get(<span class="string">'username'</span>)</div><div class="line">    <span class="keyword">if</span> <span class="string">'name'</span> <span class="keyword">in</span> session:</div><div class="line">        <span class="keyword">print</span> session[<span class="string">'name'</span>]</div><div class="line">    <span class="keyword">return</span> request.cookies.get(<span class="string">'username'</span>)</div></pre></td></tr></table></figure><p>客户端add的时候，分别在cookie中设置username，在session中设置name，使用session需要设置secret_key；客户端的show请求中，我们就能看到cookie中同时包含username：letian和session字段，在session中能解析到name字段。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Cookie和Session是为了在无状态的HTTP协议之上维护会话状态，使得服务器可以知道当前是和哪个客户在打交道。本文来详细讨论Cookie和Session的实现机制，以及其中涉及的安全问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="WEB" scheme="http://mufool.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>Centos下安装Grunt</title>
    <link href="http://mufool.com/2017/08/21/centos-grunt/"/>
    <id>http://mufool.com/2017/08/21/centos-grunt/</id>
    <published>2017-08-21T04:46:56.000Z</published>
    <updated>2017-09-08T03:45:38.063Z</updated>
    
    <content type="html"><![CDATA[<p>Grunt是一个自动化的项目构建工具. 如果你需要重复的执行像压缩, 编译, 单元测试, 代码检查以及打包发布的任务。</p><a id="more"></a><h2 id="CentOS-下安装-Node-js"><a href="#CentOS-下安装-Node-js" class="headerlink" title="CentOS 下安装 Node.js"></a>CentOS 下安装 Node.js</h2><p>1、下载源码，你需要在<code>https://nodejs.org/en/download/</code>下载最新的Nodejs版本，本文以v0.10.24为例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/src/</div><div class="line">wget http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz</div></pre></td></tr></table></figure><p>2、解压源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zxvf node-v0.10.24.tar.gz</div></pre></td></tr></table></figure><p>3、 编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd node-v0.10.24</div><div class="line">./configure --prefix=/usr/local/node/0.10.24</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure><p>4、 配置NODE_HOME，进入profile编辑环境变量<code>vim /etc/profile</code></p><p>设置nodejs环境变量，添加如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#set for nodejs</div><div class="line">export NODE_HOME=/usr/local/node/0.10.24</div><div class="line">export PATH=$NODE_HOME/bin:$PATH</div></pre></td></tr></table></figure><p><code>:wq</code>保存并退出，编译/etc/profile 使配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure><p>验证是否安装配置成功<code>node -v</code>，输出 v0.10.24 表示配置成功。</p><h2 id="安装NPM"><a href="#安装NPM" class="headerlink" title="安装NPM"></a>安装NPM</h2><p>装好NodeJS后，可以在你的终端执行下面的命令安装NPM：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://npmjs.org/install.sh | sh</div></pre></td></tr></table></figure><p>检查是否安装成功<code>npm -v</code></p><h2 id="Grunt安装"><a href="#Grunt安装" class="headerlink" title="Grunt安装"></a>Grunt安装</h2><p>Grunt和Grunt插件都是通过npm, Node.js包管理器安装和管理的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g grunt-cli</div></pre></td></tr></table></figure><p>这条命令将会把grunt命令植入到你的系统路径中，这样就允许你从任意目录中运行Grunt(定位到任意目录运行grunt命令)。</p><p>查看是否安装成功<code>grunt --version</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt-cli v1.2.0</div></pre></td></tr></table></figure><p>注意：安装grunt-cli并不等于安装了Grunt任务运行器! Grunt CLI的工作很简单：在Gruntfile所在目录调用运行已安装好的相应版本的Grunt。这就意味着可以在同一台机器上同时安装多个版本的Grunt。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Grunt是一个自动化的项目构建工具. 如果你需要重复的执行像压缩, 编译, 单元测试, 代码检查以及打包发布的任务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS" scheme="http://mufool.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>P2P之NAT详解</title>
    <link href="http://mufool.com/2017/08/21/p2p-nat/"/>
    <id>http://mufool.com/2017/08/21/p2p-nat/</id>
    <published>2017-08-21T03:39:53.000Z</published>
    <updated>2017-09-12T01:55:15.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NAT简介"><a href="#NAT简介" class="headerlink" title="NAT简介"></a>NAT简介</h2><p>&emsp;&emsp;NAT，网络地址转换，就是替换IP报文头部的地址信息。NAT通常部署在一个组织的网络出口位置，通过将内部网络IP地址替换为出口的IP地址提供公网可达性和上层协议的连接能力。<br>&emsp;&emsp;NAT的主要目的是解决IPV4缺少带来的问题，有了NAT技术，就可以在少量的公网IP和内网地址（10.0.0.0-10.255.255.255；172.16.0.0-172.31.255.255；192.168.0.0-192.168.255.255）之间建立映射关系。</p><a id="more"></a><h2 id="NAT分类"><a href="#NAT分类" class="headerlink" title="NAT分类"></a>NAT分类</h2><p>&emsp;&emsp;NAT共分为两大类：Cone NAT和Symmetric NAT。Cone NAT指的是只要源IP端口不变，无论发往的目的IP是否相同，在NAT上都映射为同一个端口，形象的看来就像锥子一样，而SymmetricNAT对于发往不同目的IP的会话在NAT上将映射为不同的端口，也就是不同的会话。 其中Cone NAT又可细分为3类，分别是Full Cone型（全锥形）、Restricted Cone型（受限锥形）和Restricted Port Cone（端口受限锥形）。限制的严格程度和对局域网内主机的保护由松到紧依次为：Full Cone、RestrictedCone、Restricted Port Cone、Symmetric NAT。“限制”指的是NAT对由外到内的数据包进行审查、过滤，看看数据包的源地址和他发送到的“洞”是否有关系，如果没有那么就将其丢弃。由内向外的限制有防火墙管理。</p><h3 id="全锥形NAT"><a href="#全锥形NAT" class="headerlink" title="全锥形NAT"></a>全锥形NAT</h3><p><img src="http://mufool.qiniudn.com/p2pnat/fc.jpg" alt="fc"><br>IP、端口都不受限。NAT设备会将客户端的{X, y}转换成公网地址的{A, b}并绑定对应关系，任何数据包通过地址{A,b}都将送到客户机的{X,y}上。</p><h3 id="受限锥形NAT"><a href="#受限锥形NAT" class="headerlink" title="受限锥形NAT"></a>受限锥形NAT</h3><p> <img src="http://mufool.qiniudn.com/p2pnat/rc.jpg" alt="rc"></p><p> IP受限，端口不受限。NAT设备会将客户端的{X, y}转换成公网地址的{A, b}并绑定对应关系，只有来自于{P}这个ip地址的包才能和主机{X, y}通信。</p><h3 id="端口受限锥型NAT"><a href="#端口受限锥型NAT" class="headerlink" title="端口受限锥型NAT"></a>端口受限锥型NAT</h3><p><img src="http://mufool.qiniudn.com/p2pnat/pc.jpg" alt="pc"><br>IP、端口都受限。NAT设备会将客户端的{X, y}转换成公网地址的{A, b}并绑定{X, y}，{A,b}和{P,q}的对应关系，NAT只会接受来自{P,q}的数据包，并将其转发到{X,y}。如果{X，y}改为向{M,n}发送数据，则{P,q}再向{A,b}发送的数据不会被接受。</p><h3 id="对称型NAT"><a href="#对称型NAT" class="headerlink" title="对称型NAT"></a>对称型NAT</h3><p> <img src="http://mufool.qiniudn.com/p2pnat/sn.jpg" alt="sn"><br>对称型NAT具有端口受限锥型的受限特性。但更重要的是，他对每个外部主机或端口的会话都会映射为不同的端口（洞）。NAT设备会将客户端的{X, y}转换成公网地址的{A, b}并绑定{X, y}，{A,b}和{P,q}的对应关系，NAT只会接受来自{P,q}的数据包，并将其转发到{X,y}，当请求一个新的地址{M,n}时，NAT设备会重新分配一个新的ip，端口{C,d}。</p><h2 id="NAT弊端"><a href="#NAT弊端" class="headerlink" title="NAT弊端"></a>NAT弊端</h2><p>在理论上，具有IP地址的每个站点在协议层面有相当的获取服务和提供服务的能力，不同的IP地址之间没有差异。NAT技术的出现破坏了IP端到端通信的能力。<br>首先，NAT使IP会话的保持时效变短。因为一个会话建立后会在NAT设备上建立一个关联表，在会话静默的这段时间，NAT网关会进行超时回收资源的操作。所以应用协议必须有报活的协议才能保持会话。<br>其次，NAT在实现上将多个内部主机发出的连接复用到一个IP上，这就使依赖IP进行主机跟踪的机制都失效了。如网络管理中需要的基于网络流量分析的应用无法跟踪到终端用户与流量的具体行为的关系。基于用户行为的日志分析也变得困难，因为一个IP被很多用户共享，如果存在恶意的用户行为，很难定位到发起连接的那个主机。<br>此外，NAT工作机制依赖于修改IP包头的信息，这会妨碍一些安全协议的工作。因为NAT篡改了IP地址、传输层端口号和校验和，这会导致认证协议彻底不能工作，因为认证目的就是要保证这些信息在传输过程中没有变化。<br>总之，因为NAT隐蔽了通信的一端，把简单的事情复杂化了。</p><h2 id="NAT穿透技术"><a href="#NAT穿透技术" class="headerlink" title="NAT穿透技术"></a>NAT穿透技术</h2><p>&emsp;&emsp;为了解决IP端到端应用在NAT环境下遇到的问题，网络协议的设计者们创造了很多工具来应对，其中主要有应用层网关，探针技术STUN和TURN，中间件技术，中继代理技术，特定协议的自穿越技术。这里主要介绍探针技术STUN和TURN。</p><p>&emsp;&emsp;所谓探针技术STUN，是通过在所有参与通信的实体上安装探测插件，以检测网络中是否存在NAT网关，并对不同NAT模型实施不同穿越方法的一种技术。所谓中继服务TURN，是通过转发请求实现两台具有NAT设备的内网IP建立链接。</p><h3 id="NAT类型识别"><a href="#NAT类型识别" class="headerlink" title="NAT类型识别"></a>NAT类型识别</h3><p>&emsp;&emsp;STUN服务器上两个公网IP分别A1,A2，同时绑定两个端口P1,P2。在主机上使用两个IP主要是测试客户机是否是对称型NAT和时候是IP受限制型NAT。主要测试流程如下：</p><ol><li>使用端口1发送消息给A1:P1，测试能否响应，能响应则UDP协议可以通过</li><li>使用端口1发送消息给A2:P2，比较响应中的地址和上一步返回的地址是否一致，验证NAT是否对不通的目的地址进行相同的映射</li><li>使用端口1发送消息给第一部中返回的NAT上映射的外网IP和端口，测试是否有回应，验证NAT是否回环</li><li>使用端口2发送消息给A1:P1，服务器端使用A2:P1回复，验证是否为IP受限NAT</li><li>使用端口2发送消息给A1:P1，服务器端使用A1:P2回复，验证是否为端口受限NAT</li><li>同时，通过以上服务器返回的客户端IP，可以有很多方法确定是否是公网IP，如绑定这个地址或者与本地网卡中IP地址比较</li></ol><h3 id="NAT穿透"><a href="#NAT穿透" class="headerlink" title="NAT穿透"></a>NAT穿透</h3><p>其中一个是公网（5种）<br>客户端A是公网，A通知服务器S希望与B建立通信；S将消息转给B；B主动连接A，NAT上留下与A通信用的映射关系；A就可以与B进行正常通信，打洞成功。这种情况下，无论B是什么类型，都能成功建立连接。</p><p>其中一个是FC（4种）<br>客户端A是FC类型，A通知S与B建立通信；S通知B想A已经存在的洞建立连接；A收到B的连接包，打洞成功。这种情况下，因为A主要在NAT上有对应关系，则任何其他地址都可以通着这个对应关系与A建立连接</p><p>其中一个是RC（3种）</p><ul><li>RC和RC，A连接S希望连B，NAT上映射关系Na只能与S通信；B和S也有保存会话的NAT映射关系Nb，此时B去连接A上的Na，失败，但是Nb属性更改为与A的连接，此时A连接B可以成功，同时Na的属性也更改为与B的连接，打洞成功。（注：真正使用可能不会复用与服务器的报端连接，而是A和B同时连接对方，后连接的以方可以打洞成功）</li><li>RC和PC，与RC和RC类似</li><li>RC和SN，B向A不通；然后A向B发包，不通，但A上留下一个可以给B使用的洞；B在使用新的映射连接A，A可以收到，并拿到B上留给A的洞的信息；A回复B，连接建立。</li></ul><p>其中一个是PC（2种）</p><ul><li>PC和PC，同RC和RC。B连A，丢弃； A连B，通过；B回复A，连接建立</li><li>PC和SN，与RC和SN的过程类似，但是在第三步，B使用新的映射连接A，A无法收到B的消息，因为A是端口受限，所以PC和SN无法打洞成功。</li></ul><p>其中一个是SN（1种）</p><ul><li>SN和SN，无法成功</li></ul><table><thead><tr><th>类型</th><th>公网</th><th>FC</th><th>RC</th><th>PC</th><th>SN </th></tr></thead><tbody><tr><td>公网</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>FC</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>RC</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>PC</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>SN</td><td>Y</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr></tbody></table><p>参考：<br><a href="https://www.slideshare.net/foxhengxing/p2pnat" target="_blank" rel="external">P2P之NAT穿透</a><br><a href="http://www.52im.net/thread-50-1-1.html" target="_blank" rel="external">NAT详解——详细原理、P2P简介</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NAT简介&quot;&gt;&lt;a href=&quot;#NAT简介&quot; class=&quot;headerlink&quot; title=&quot;NAT简介&quot;&gt;&lt;/a&gt;NAT简介&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;NAT，网络地址转换，就是替换IP报文头部的地址信息。NAT通常部署在一个组织的网络出口位置，通过将内部网络IP地址替换为出口的IP地址提供公网可达性和上层协议的连接能力。&lt;br&gt;&amp;emsp;&amp;emsp;NAT的主要目的是解决IPV4缺少带来的问题，有了NAT技术，就可以在少量的公网IP和内网地址（10.0.0.0-10.255.255.255；172.16.0.0-172.31.255.255；192.168.0.0-192.168.255.255）之间建立映射关系。&lt;/p&gt;
    
    </summary>
    
    
      <category term="P2P" scheme="http://mufool.com/tags/P2P/"/>
    
  </entry>
  
  <entry>
    <title>Spark或Hadoop集群无法停止</title>
    <link href="http://mufool.com/2017/07/06/spark-no-stop/"/>
    <id>http://mufool.com/2017/07/06/spark-no-stop/</id>
    <published>2017-07-06T11:06:25.000Z</published>
    <updated>2017-09-08T03:45:38.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>执行<code>sbin/stop-all.sh</code>，提示：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Stopping namenodes on [master]</div><div class="line">master: no namenode to stop</div><div class="line">slave1: no datanode to stop</div><div class="line">Stopping secondary namenodes [master]</div><div class="line">master: no secondarynamenode to stop</div></pre></td></tr></table></figure><a id="more"></a><p>jps显示进程都在：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">25280</span> Jps</div><div class="line"><span class="number">4290</span> Master</div><div class="line"><span class="number">21235</span> SecondaryNameNode</div><div class="line"><span class="number">21395</span> ResourceManager</div><div class="line"><span class="number">15687</span> Master</div><div class="line"><span class="number">21052</span> NameNode</div></pre></td></tr></table></figure><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>以Spark为例，Spark启动停止都是通过<code>hadoop-daemon.sh</code>文件，其中部分代码如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment"># some variables</span></div><div class="line">log=<span class="string">"<span class="variable">$SPARK_LOG_DIR</span>/spark-<span class="variable">$SPARK_IDENT_STRING</span>-<span class="variable">$command</span>-<span class="variable">$instance</span>-<span class="variable">$HOSTNAME</span>.out"</span></div><div class="line">pid=<span class="string">"<span class="variable">$SPARK_PID_DIR</span>/spark-<span class="variable">$SPARK_IDENT_STRING</span>-<span class="variable">$command</span>-<span class="variable">$instance</span>.pid"</span></div><div class="line"></div><div class="line"><span class="comment"># Set default scheduling priority</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$SPARK_NICENESS</span>"</span> = <span class="string">""</span> ]; then</div><div class="line">export SPARK_NICENESS=<span class="number">0</span></div><div class="line">fi</div><div class="line"></div><div class="line">execute_command() &#123;</div><div class="line"><span class="keyword">if</span> [ -z $&#123;SPARK_NO_DAEMONIZE+set&#125; ]; then</div><div class="line">nohup -- <span class="string">"$@"</span> &gt;&gt; <span class="variable">$log</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &lt; /dev/null &amp;</div><div class="line">newpid=<span class="string">"$!"</span></div><div class="line"></div><div class="line">echo <span class="string">"<span class="variable">$newpid</span>"</span> &gt; <span class="string">"<span class="variable">$pid</span>"</span></div><div class="line"></div><div class="line"><span class="comment"># Poll for up to 5 seconds for the java process to start</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">10</span>&#125;</div><div class="line"><span class="keyword">do</span></div><div class="line"><span class="keyword">if</span> [[ $(ps -p <span class="string">"<span class="variable">$newpid</span>"</span> -o comm=) =~ <span class="string">"java"</span> ]]; then</div><div class="line"><span class="keyword">break</span></div><div class="line">fi</div><div class="line">sleep <span class="number">0.5</span></div><div class="line">done</div><div class="line"></div><div class="line">sleep <span class="number">2</span></div><div class="line"><span class="comment"># Check if the process has died; in that case we'll tail the log so the user can see</span></div><div class="line"><span class="keyword">if</span> [[ ! $(ps -p <span class="string">"<span class="variable">$newpid</span>"</span> -o comm=) =~ <span class="string">"java"</span> ]]; then</div><div class="line">echo <span class="string">"failed to launch: $@"</span></div><div class="line">tail -<span class="number">2</span> <span class="string">"<span class="variable">$log</span>"</span> | sed <span class="string">'s/^//'</span></div><div class="line">echo <span class="string">"full log in <span class="variable">$log</span>"</span></div><div class="line">fi</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="string">"$@"</span></div><div class="line">fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">run_command() &#123;</div><div class="line">mode=<span class="string">"<span class="variable">$1</span>"</span></div><div class="line">shift</div><div class="line"></div><div class="line">mkdir -p <span class="string">"<span class="variable">$SPARK_PID_DIR</span>"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$pid</span>"</span> ]; then</div><div class="line">TARGET_ID=<span class="string">"$(cat "</span><span class="variable">$pid</span><span class="string">")"</span></div><div class="line"><span class="keyword">if</span> [[ $(ps -p <span class="string">"<span class="variable">$TARGET_ID</span>"</span> -o comm=) =~ <span class="string">"java"</span> ]]; then</div><div class="line">echo <span class="string">"<span class="variable">$command</span> running as process <span class="variable">$TARGET_ID</span>.  Stop it first."</span></div><div class="line"><span class="keyword">exit</span> <span class="number">1</span></div><div class="line">fi</div><div class="line">fi</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$SPARK_MASTER</span>"</span> != <span class="string">""</span> ]; then</div><div class="line">echo rsync from <span class="string">"<span class="variable">$SPARK_MASTER</span>"</span></div><div class="line">rsync -a -e ssh --delete --exclude=.svn --exclude=<span class="string">'logs/*'</span> --exclude=<span class="string">'contrib/hod/logs/*'</span> <span class="string">"<span class="variable">$SPARK_MASTER</span>/"</span> <span class="string">"$&#123;SPARK_HOME&#125;"</span></div><div class="line">  fi</div><div class="line"></div><div class="line">spark_rotate_log <span class="string">"<span class="variable">$log</span>"</span></div><div class="line">echo <span class="string">"starting <span class="variable">$command</span>, logging to <span class="variable">$log</span>"</span></div><div class="line"></div><div class="line">  case <span class="string">"<span class="variable">$mode</span>"</span> <span class="keyword">in</span></div><div class="line">(class)</div><div class="line">execute_command nice -n <span class="string">"<span class="variable">$SPARK_NICENESS</span>"</span> <span class="string">"$&#123;SPARK_HOME&#125;"</span>/bin/spark-class <span class="string">"<span class="variable">$command</span>"</span> <span class="string">"$@"</span></div><div class="line">;;</div><div class="line"></div><div class="line">(submit)</div><div class="line">execute_command nice -n <span class="string">"<span class="variable">$SPARK_NICENESS</span>"</span> bash <span class="string">"$&#123;SPARK_HOME&#125;"</span>/bin/spark-submit --class <span class="string">"<span class="variable">$command</span>"</span> <span class="string">"$@"</span></div><div class="line">;;</div><div class="line"></div><div class="line">(*)</div><div class="line">echo <span class="string">"unknown mode: <span class="variable">$mode</span>"</span></div><div class="line"><span class="keyword">exit</span> <span class="number">1</span></div><div class="line">;;</div><div class="line">esac</div><div class="line">&#125;</div><div class="line"></div><div class="line">case <span class="variable">$option</span> <span class="keyword">in</span></div><div class="line"></div><div class="line">(submit)</div><div class="line"></div><div class="line">run_command submit <span class="string">"$@"</span></div><div class="line">;;</div><div class="line"></div><div class="line">(start)</div><div class="line"></div><div class="line">run_command class <span class="string">"$@"</span></div><div class="line">;;</div><div class="line"></div><div class="line">(stop)</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ -f <span class="variable">$pid</span> ]; then</div><div class="line">TARGET_ID=<span class="string">"$(cat "</span><span class="variable">$pid</span><span class="string">")"</span></div><div class="line"><span class="keyword">if</span> [[ $(ps -p <span class="string">"<span class="variable">$TARGET_ID</span>"</span> -o comm=) =~ <span class="string">"java"</span> ]]; then</div><div class="line">echo <span class="string">"stopping <span class="variable">$command</span>"</span></div><div class="line">kill <span class="string">"<span class="variable">$TARGET_ID</span>"</span> &amp;&amp; rm -f <span class="string">"<span class="variable">$pid</span>"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">echo <span class="string">"no <span class="variable">$command</span> to stop"</span></div><div class="line">fi</div><div class="line"><span class="keyword">else</span></div><div class="line">echo <span class="string">"no <span class="variable">$command</span> to stop"</span></div><div class="line">fi</div><div class="line">;;</div><div class="line"></div><div class="line">(status)</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ -f <span class="variable">$pid</span> ]; then</div><div class="line">TARGET_ID=<span class="string">"$(cat "</span><span class="variable">$pid</span><span class="string">")"</span></div><div class="line"><span class="keyword">if</span> [[ $(ps -p <span class="string">"<span class="variable">$TARGET_ID</span>"</span> -o comm=) =~ <span class="string">"java"</span> ]]; then</div><div class="line">echo <span class="variable">$command</span> is running.</div><div class="line"><span class="keyword">exit</span> <span class="number">0</span></div><div class="line"><span class="keyword">else</span></div><div class="line">echo <span class="variable">$pid</span> file is present but <span class="variable">$command</span> not running</div><div class="line"><span class="keyword">exit</span> <span class="number">1</span></div><div class="line">fi</div><div class="line"><span class="keyword">else</span></div><div class="line">echo <span class="variable">$command</span> not running.</div><div class="line"><span class="keyword">exit</span> <span class="number">2</span></div><div class="line">fi</div><div class="line">;;</div><div class="line"></div><div class="line">(*)</div><div class="line">echo <span class="variable">$usage</span></div><div class="line"><span class="keyword">exit</span> <span class="number">1</span></div><div class="line">;;</div><div class="line">esac</div></pre></td></tr></table></figure><p>可以看到，启动是会生成pid文件，停止时会读取pid文件，并<code>kill &quot;$TARGET_ID&quot; &amp;&amp; rm -f &quot;$pid&quot;</code>，在pid文件在不定义是，默认存放目录值tmp，linux系统默认每30天清理一次/tmp目录下的文件。pid文件丢失将导致无法正确关闭相应进程。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>pid文件的默认文件名格式如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pid=<span class="string">"<span class="variable">$SPARK_PID_DIR</span>/spark-<span class="variable">$SPARK_IDENT_STRING</span>-<span class="variable">$command</span>-<span class="variable">$instance</span>.pid"</span></div></pre></td></tr></table></figure><p>通过代码可以知道，</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$SPARK_PID_DIR</span> = /tmp</div><div class="line"><span class="variable">$SPARK_IDENT_STRING</span> = hdfs <span class="comment">#username</span></div><div class="line"><span class="variable">$command</span> = org.apache.spark.deploy.master.Master <span class="comment"># or worker</span></div><div class="line"><span class="variable">$instance</span> = <span class="number">1</span></div></pre></td></tr></table></figure><p>所以，我们只需要找到对应进程的进程号，创建文件并添加就可以正常关闭进程</p><h2 id="根治方法"><a href="#根治方法" class="headerlink" title="根治方法"></a>根治方法</h2><p>既然tmp目录会被系统定时清理，那么我们重新设置对应服务的pid存放路径即可</p><p>修改hadoop-env.sh，增加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> HADOOP_PID_DIR=/opt/hadoop/appid/</div></pre></td></tr></table></figure><p>修改spark-env.sh，增加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> SPARK_PID_DIR=/opt/hadoop/appid/</div></pre></td></tr></table></figure><p>重启对应服务：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-rw-rw-r-- <span class="number">1</span> hdfs hdfs <span class="number">6</span> Jul  <span class="number">6</span> <span class="number">15</span>:<span class="number">54</span> hadoop-hdfs-datanode.pid</div><div class="line">-rw-rw-r-- <span class="number">1</span> hdfs hdfs <span class="number">6</span> Jul  <span class="number">6</span> <span class="number">15</span>:<span class="number">54</span> hadoop-hdfs-journalnode.pid</div><div class="line">-rw-rw-r-- <span class="number">1</span> hdfs hdfs <span class="number">6</span> Jul  <span class="number">6</span> <span class="number">15</span>:<span class="number">44</span> spark-hdfs-org.apache.spark.deploy.worker.Worker-<span class="number">1</span>.pid</div><div class="line">-rw-rw-r-- <span class="number">1</span> hdfs hdfs <span class="number">6</span> Jul  <span class="number">6</span> <span class="number">15</span>:<span class="number">54</span> yarn-hdfs-nodemanager.pid</div></pre></td></tr></table></figure><p>通过这个问题我们可以知道，很对linux下对应的服务都有类似的控制脚本，或者可以添加类似的控制脚本，但是在存放pid文件是我们也应该主要到这个问题。防止因为系统原因，导致服务无法正常重启等问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;执行&lt;code&gt;sbin/stop-all.sh&lt;/code&gt;，提示：&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Stopping namenodes on [master]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;master: no namenode to stop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;slave1: no datanode to stop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Stopping secondary namenodes [master]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;master: no secondarynamenode to stop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SPARK" scheme="http://mufool.com/tags/SPARK/"/>
    
  </entry>
  
  <entry>
    <title>log4j2使用</title>
    <link href="http://mufool.com/2017/07/06/log4j2/"/>
    <id>http://mufool.com/2017/07/06/log4j2/</id>
    <published>2017-07-06T10:08:41.000Z</published>
    <updated>2017-09-08T03:45:38.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>pom.xml中添加依赖</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Logger logger = LogManager.getLogger(Logs.class.getName());</div><div class="line">logger.trace(<span class="string">"trace level"</span>);</div><div class="line">logger.debug(<span class="string">"debug level"</span>);</div><div class="line">logger.info(<span class="string">"info level"</span>);</div><div class="line">logger.warn(<span class="string">"warn level"</span>);</div><div class="line">logger.error(<span class="string">"error level"</span>);</div><div class="line">logger.fatal(<span class="string">"fatal level"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里需要注意的是应用头文件是log4j2的头文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</div><div class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</div></pre></td></tr></table></figure><p>而非</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.log4j.LogManager;</div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div></pre></td></tr></table></figure><p>否则会出现编译执行通过，无法打印日志的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console.</div><div class="line">20:37:11.965 [main] ERROR  - error level</div><div class="line">20:37:11.965 [main] FATAL  - fatal level</div></pre></td></tr></table></figure><p>显示找不到配置文件，使用了默认的配置，输出了error和fatal两个级别的信息。</p><h2 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h2><p>log4j2默认会在classpath目录下寻找log4j.json、log4j.jsn、log4j2.xml等名称的文件，如果都没有找到，则会按默认配置输出，也就是输出到控制台。下面我们按默认配置添加一个log4j2.xml，添加到src根目录即可</p><p>log4j 2.x版本不再支持像1.x中的.properties后缀的文件配置方式，2.x版本配置文件后缀名只能为”.xml”,”.json”或者”.jsn”。<br>系统选择配置文件的优先级如下：</p><ol><li>classpath下的名为log4j2-test.json 或者log4j2-test.jsn的文件</li><li>classpath下的名为log4j2-test.xml的文件</li><li>classpath下名为log4j2.json 或者log4j2.jsn的文件</li><li>classpath下名为log4j2.xml的文件</li></ol><p>我们一般默认使用log4j2.xml进行命名。如果本地要测试，可以把log4j2-test.xml放到classpath，而正式环境使用log4j2.xml，则在打包部署的时候不要打包log4j2-test.xml即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"OFF"</span>， <span class="attr">monitorinterval</span>=<span class="string">"30"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appenders</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Console</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"trace"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><p>根节点Configuration有两个属性：status和monitorinterval</p><ul><li>status用来指定log4j本身的打印日志的级别</li><li>monitorinterval用于指定log4j自动重新配置的监测间隔时间，单位是s，最小是5s</li></ul><p>有两个子节点:Appenders和Loggers</p><h3 id="Appenders"><a href="#Appenders" class="headerlink" title="Appenders"></a>Appenders</h3><p>Appenders负责定义日志输出的目的地，它可以是控制台（ConsoleAppender）、文件（FileAppender）、以Email的形式发送出去（SMTPAppender）等，Log4j 2官网介绍了20种Appender：<a href="http://logging.apache.org/log4j/2.x/manual/appenders.html。" target="_blank" rel="external">http://logging.apache.org/log4j/2.x/manual/appenders.html。</a></p><p>下面介绍3种常用的Appender：ConsoleAppender、FileAppender、RollingFileAppender</p><p><strong>1.ConsoleAppender</strong></p><p>ConsoleAppender将输出写到System.err或System.out。上面测试例子中的Appender均为ConsoleAppender，输出写到了System.out。如果想将输出写到System.err，设置Console标签下的target为”SYSTEM_ERR “即可</p><ul><li>name：指定Appender的名字</li><li>target：SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT</li><li>PatternLayout：输出格式，不设置默认为:%m%n</li></ul><p><strong>2.FileAppender</strong></p><p>FileAppender将输出写到指定文件，在File标签下设置fileName即可。fileName可以是绝对路径的文件也可以是相对路径的文件</p><ul><li>name：指定Appender的名字</li><li>fileName：指定输出日志的目的文件带全路径的文件名</li><li>PatternLayout：输出格式，不设置默认为:%m%n</li></ul><p><strong>3.RollingFileAppender</strong></p><p>RollingFileAppender跟FileAppender的基本用法一样。但RollingFileAppender可以设置log文件的size（单位：KB/MB/GB）上限、数量上限，当log文件超过设置的size上限，会自动被压缩。RollingFileAppender可以理解为滚动输出日志，如果log4j2记录的日志达到上限，旧的日志将被删除，腾出的空间用于记录新的日志</p><ul><li>name：指定Appender的名字</li><li>fileName：指定输出日志的目的文件带全路径的文件名</li><li>PatternLayout：输出格式，不设置默认为：%m%n</li><li>filePattern：指定新建日志文件的名称格式</li><li>Policies：指定滚动日志的策略，就是什么时候进行新建日志文件输出日志</li><li>TimeBasedTriggeringPolicy：Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am…而不是7am</li><li>SizeBasedTriggeringPolicy：Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小</li><li>DefaultRolloverStrategy：用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。</li></ul><p><strong>4.Filters</strong></p><p>Filter可以过滤log事件，并控制log输出，log4j2定义了10种 Filter：<a href="http://logging.apache.org/log4j/2.x/manual/filters.html" target="_blank" rel="external">http://logging.apache.org/log4j/2.x/manual/filters.html</a></p><p>BurstFilter可以控制某一级别的log的并发情况：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"warn"</span> <span class="attr">name</span>=<span class="string">"MyApp"</span> <span class="attr">packages</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFile"</span> <span class="attr">fileName</span>=<span class="string">"logs/app.log"</span></span></div><div class="line"><span class="tag"><span class="attr">filePattern</span>=<span class="string">"logs/app-%d&#123;MM-dd-yyyy&#125;.log.gz"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">BurstFilter</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">rate</span>=<span class="string">"16"</span> <span class="attr">maxBurst</span>=<span class="string">"100"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Policies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"1 KB"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"trace"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"RollingFile"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><ul><li>level：BurstFilter过滤的事件级别</li><li>rate：每秒允许的log事件的平均值</li><li>maxBurst：当BurstFilter过滤的事件超过rate值，排队的log事件上限。超过此上限的log，将被丢弃。默认情况下maxBurst = 10*rate</li></ul><p>按以上配置，假定每个log事件的执行时间较长，输出117个log事件（INFO级别）到RollingFileAppenders，BurstFilter会过滤得到INFO级别的log事件，之后会发生：16个log事件在执行，100个等待执行，1个被丢弃。</p><p>ThresholdFilter按日志级别区分文件输出：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;Configuration status=<span class="string">"WARN"</span> monitorInterval=<span class="string">"300"</span>&gt;</div><div class="line">&lt;properties&gt;</div><div class="line">&lt;property name="LOG_HOME"&gt;D:/logs&lt;/property&gt;</div><div class="line">&lt;/properties&gt;</div><div class="line">&lt;Appenders&gt;</div><div class="line">...</div><div class="line">&lt;RollingRandomAccessFile name=<span class="string">"InfoFile"</span></div><div class="line">fileName=<span class="string">"$&#123;LOG_HOME&#125;/info.log"</span></div><div class="line">filePattern=<span class="string">"$&#123;LOG_HOME&#125;/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</div><div class="line">&lt;Filters&gt;</div><div class="line">&lt;ThresholdFilter level=<span class="string">"warn"</span> onMatch=<span class="string">"DENY"</span> onMismatch=<span class="string">"NEUTRAL"</span> /&gt;</div><div class="line">&lt;ThresholdFilter level=<span class="string">"trace"</span> onMatch=<span class="string">"ACCEPT"</span> onMismatch=<span class="string">"DENY"</span> /&gt;</div><div class="line">&lt;/Filters&gt;</div><div class="line">&lt;PatternLayout pattern=<span class="string">"%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %level [%thread][%file:%line] - %msg%n"</span> /&gt;</div><div class="line">&lt;Policies&gt;</div><div class="line">&lt;TimeBasedTriggeringPolicy /&gt;</div><div class="line">&lt;SizeBasedTriggeringPolicy size=<span class="string">"10 MB"</span> /&gt;</div><div class="line">&lt;/Policies&gt;</div><div class="line">&lt;DefaultRolloverStrategy max=<span class="string">"20"</span> /&gt;</div><div class="line">&lt;/RollingRandomAccessFile&gt;</div><div class="line"></div><div class="line">&lt;RollingRandomAccessFile name=<span class="string">"ErrorFile"</span></div><div class="line">fileName=<span class="string">"$&#123;LOG_HOME&#125;/error.log"</span></div><div class="line">filePattern=<span class="string">"$&#123;LOG_HOME&#125;/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</div><div class="line">&lt;Filters&gt;</div><div class="line">&lt;ThresholdFilter level=<span class="string">"warn"</span> onMatch=<span class="string">"ACCEPT"</span> onMismatch=<span class="string">"DENY"</span> /&gt;</div><div class="line">&lt;ThresholdFilter level=<span class="string">"error"</span> onMatch=<span class="string">"ACCEPT"</span> onMismatch=<span class="string">"DENY"</span> /&gt;</div><div class="line">&lt;/Filters&gt;</div><div class="line">&lt;PatternLayout pattern=<span class="string">"%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %level [%thread][%file:%line] - %msg%n"</span> /&gt;</div><div class="line">&lt;Policies&gt;</div><div class="line">&lt;TimeBasedTriggeringPolicy /&gt;</div><div class="line">&lt;SizeBasedTriggeringPolicy size=<span class="string">"10 MB"</span> /&gt;</div><div class="line">&lt;/Policies&gt;</div><div class="line">&lt;DefaultRolloverStrategy max=<span class="string">"20"</span> /&gt;</div><div class="line">&lt;/RollingRandomAccessFile&gt;</div><div class="line">...</div><div class="line">&lt;/Appenders&gt;</div><div class="line">&lt;Loggers&gt;</div><div class="line">&lt;Root level=<span class="string">"trace"</span>&gt;</div><div class="line">&lt;AppenderRef ref=<span class="string">"Console"</span> /&gt;</div><div class="line">&lt;AppenderRef ref=<span class="string">"FatalFile"</span> /&gt;</div><div class="line">&lt;AppenderRef ref=<span class="string">"ErrorFile"</span> /&gt;</div><div class="line">&lt;/Root&gt;</div><div class="line">&lt;/Loggers&gt;</div><div class="line">&lt;/Configuration&gt;</div></pre></td></tr></table></figure></p><ul><li>DENY，日志将立即被抛弃不再经过其他过滤器</li><li>NEUTRAL，有序列表里的下个过滤器过接着处理日志</li><li>ACCEPT，日志会被立即处理，不再经过剩余过滤器</li></ul><p>以上两个配置将info以下的日志写入info.log，warn和error写入error.log</p><h3 id="Loggers"><a href="#Loggers" class="headerlink" title="Loggers"></a>Loggers</h3><p>Loggers节点，常见的有两种：Root和Logger。</p><p><strong>1.Root</strong></p><p>Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出</p><ul><li>Level：日志输出级别，共有8个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF.</li><li>AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender。</li></ul><p><strong>2.Logger</strong></p><p>Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。</p><ul><li>Level：日志输出级别，共有8个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF.</li><li>name：用来指定该Logger所适用的类或者类所在的包全路径，继承自Root节点.</li><li>AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity=”false”只在自定义的Appender中进行输出。</li></ul><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p>共有8个级别，按照从低到高为：All &lt; Trace &lt; Debug &lt; Info &lt; Warn &lt; Error &lt; Fatal &lt; OFF。</p><ul><li>All：最低等级的，用于打开所有日志记录</li><li>Trace：是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出</li><li>Debug：指出细粒度信息事件对调试应用程序是非常有帮助的</li><li>Info：消息在粗粒度级别上突出强调应用程序的运行过程</li><li>Warn：输出警告及warn以下级别的日志</li><li>Error：输出错误信息日志</li><li>Fatal：输出每个严重的错误事件将会导致应用程序的退出的日志</li><li>OFF：最高等级的，用于关闭所有日志记录</li></ul><p>程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。</p><h2 id="自定义读取配置文件"><a href="#自定义读取配置文件" class="headerlink" title="自定义读取配置文件"></a>自定义读取配置文件</h2><p>读取配置文件方式自定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">File file = <span class="keyword">new</span> File(<span class="string">"./conf/log4j2.xml"</span>);</div><div class="line">BufferedInputStream in = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">ConfigurationSource source = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">source = <span class="keyword">new</span> ConfigurationSource(in);</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">Configurator.initialize(<span class="keyword">null</span>, source);</div></pre></td></tr></table></figure><h2 id="自定义输出格式"><a href="#自定义输出格式" class="headerlink" title="自定义输出格式"></a>自定义输出格式</h2><p>%d{HH:mm:ss.SSS} 表示输出到毫秒的时间<br>%t 输出当前线程名称<br>%-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0<br>%logger 输出logger名称，因为Root Logger没有名称，所以没有输出<br>%msg 日志文本<br>%n 换行</p><p>其他常用的占位符有：</p><p>%F 输出所在的类文件名，如Client.java<br>%L 输出行号<br>%M 输出所在方法名<br>%l 输出语句所在的行数, 包括类名、方法名、文件名、行数</p><h2 id="自定义logger"><a href="#自定义logger" class="headerlink" title="自定义logger"></a>自定义logger</h2><p>初始化logger时，可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Logger logger = LogManager.getLogger(<span class="string">"mylog"</span>);</div></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Logger logger = LogManager.getLogger(Logs.class.getName());</div></pre></td></tr></table></figure><p>Logs为应用程序中的日志类名。</p><p>这样在配置文件中，即可以使用自定义的logger，控制自定义log的输出，与root区分开。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"mylog"</span> <span class="attr">level</span>=<span class="string">"trace"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="自定义Appender"><a href="#自定义Appender" class="headerlink" title="自定义Appender"></a>自定义Appender</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span> <span class="attr">monitorInterval</span>=<span class="string">"300"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Console</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"MyFile"</span> <span class="attr">fileName</span>=<span class="string">"./logs/app.log"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">File</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"mylog"</span> <span class="attr">level</span>=<span class="string">"trace"</span> <span class="attr">additivity</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"MyFile"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="按大小和时间生成日志文件"><a href="#按大小和时间生成日志文件" class="headerlink" title="按大小和时间生成日志文件"></a>按大小和时间生成日志文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span> <span class="attr">monitorInterval</span>=<span class="string">"300"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span>&gt;</span>D:/logs<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_NAME"</span>&gt;</span>mylog<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Console</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"myfile"</span></span></div><div class="line"><span class="tag"><span class="attr">fileName</span>=<span class="string">"$&#123;LOG_HOME&#125;/$&#123;FILE_NAME&#125;.log"</span></span></div><div class="line"><span class="tag"><span class="attr">filePattern</span>=<span class="string">"$&#123;LOG_HOME&#125;/$$&#123;date:yyyy-MM&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd HH-mm&#125;-%i.log"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">PatternLayout</span></span></div><div class="line"><span class="tag"><span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Policies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"10 MB"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"mylog"</span> <span class="attr">level</span>=<span class="string">"trace"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"myfile"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></div></pre></td></tr></table></figure><p>TimeBasedTriggeringPolicy这个配置需要和filePattern结合使用，注意filePattern中配置的文件重命名规则是${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i，最小的时间粒度是mm，即分钟，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1分钟生成一个新文件。如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件。</p><h2 id="异步写文件"><a href="#异步写文件" class="headerlink" title="异步写文件"></a>异步写文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">&lt;Appenders&gt;</div><div class="line">&lt;Console name=<span class="string">"Console"</span> target=<span class="string">"SYSTEM_OUT"</span>&gt;</div><div class="line">...</div><div class="line">&lt;/Console&gt;</div><div class="line">&lt;RollingRandomAccessFile name=<span class="string">"MyFile"</span></div><div class="line">...</div><div class="line">&lt;/RollingRandomAccessFile&gt;</div><div class="line">&lt;Async name=<span class="string">"Async"</span>&gt;</div><div class="line">&lt;AppenderRef ref=<span class="string">"MyFile"</span> /&gt;</div><div class="line">&lt;/Async&gt;</div><div class="line">&lt;/Appenders&gt;</div><div class="line">...</div></pre></td></tr></table></figure><h2 id="日志输出到flume"><a href="#日志输出到flume" class="headerlink" title="日志输出到flume"></a>日志输出到flume</h2><p>配置文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span> <span class="attr">monitorInterval</span>=<span class="string">"300"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Flume</span> <span class="attr">name</span>=<span class="string">"eventLogger"</span> <span class="attr">compress</span>=<span class="string">"false"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Agent</span> <span class="attr">host</span>=<span class="string">"127.0.0.1"</span> <span class="attr">port</span>=<span class="string">"41414"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">RFC5424Layout</span> <span class="attr">enterpriseNumber</span>=<span class="string">"18060"</span> <span class="attr">includeMDC</span>=<span class="string">"true"</span> <span class="attr">appName</span>=<span class="string">"MyApp"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Flume</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"trace"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"eventLogger"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>flume上配置source类型为avro即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">agent1.sources.source.type=avro</div><div class="line">agent1.sources.source.channels=channel</div><div class="line">agent1.sources.source.bind=0.0.0.0</div><div class="line">agent1.sources.source.port=41414</div><div class="line">...</div></pre></td></tr></table></figure><p>参考：<br><a href="http://blog.csdn.net/autfish/article/details/51244787" target="_blank" rel="external">详解log4j2(下) - Async/MongoDB/Flume Appender 按日志级别区分文件输出</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h2&gt;&lt;p&gt;pom.xml中添加依赖&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://mufool.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Spark工作机制</title>
    <link href="http://mufool.com/2017/07/05/spark-mechanism/"/>
    <id>http://mufool.com/2017/07/05/spark-mechanism/</id>
    <published>2017-07-05T04:28:55.000Z</published>
    <updated>2017-09-12T01:55:35.025Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<br><a href="http://www.jianshu.com/p/c7eef3eb6225" target="_blank" rel="external">Spark-core-架构及工作机制综述</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/c7eef3eb6225&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spark-core-架构及工作机制综述&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="SPARK" scheme="http://mufool.com/tags/SPARK/"/>
    
  </entry>
  
  <entry>
    <title>域名邮箱服务</title>
    <link href="http://mufool.com/2017/07/05/domain-mail/"/>
    <id>http://mufool.com/2017/07/05/domain-mail/</id>
    <published>2017-07-05T03:15:13.000Z</published>
    <updated>2017-09-08T03:45:38.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MX（Mail-Exchanger）记录"><a href="#MX（Mail-Exchanger）记录" class="headerlink" title="MX（Mail Exchanger）记录"></a>MX（Mail Exchanger）记录</h2><p>MX是邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据 收信人的地址后缀来定位邮件服务器。例如，当Internet上的某用户要发一封信给 user@mydomain.com 时，该用户的邮件系统通过DNS查找mydomain.com这个域名的MX记录，如果MX记录存在， 用户计算机就将邮件发送到MX记录所指定的邮件服务器上。 MX记录也叫做邮件路由记录，用户可以将该域名下的邮件服务器指向到自己的mail server上，然后即可自行操控所有的邮箱设置 。</p><a id="more"></a><h2 id="MX优先级"><a href="#MX优先级" class="headerlink" title="MX优先级"></a>MX优先级</h2><p>如果您的域有多个 MX 记录，邮件发件人将决定使用哪一个记录。MX 记录使用一个称为“首选项”的字段以确定优先级。当您创建 MX 记录时，大多数 DNS 托管提供商要求您设置首选数字。有些提供商将输入框标记为“首选项”，另一些标记为“优先级”。有些提供商要求输入数字，另一些提供商要求您选择“低”、“中”或“高”。</p><h2 id="一级域名邮箱设置"><a href="#一级域名邮箱设置" class="headerlink" title="一级域名邮箱设置"></a>一级域名邮箱设置</h2><p>以下是在DNSPOD上，添加主域名（mail.mydomain.com）的邮箱记录，将其指定到自定义的邮件服务器上（对应A记录的ip地址）<br><img src="http://mufool.qiniudn.com/domain/domain-mail-1.jpg" alt="domain-mail-1"></p><h2 id="二级域名邮箱设置"><a href="#二级域名邮箱设置" class="headerlink" title="二级域名邮箱设置"></a>二级域名邮箱设置</h2><p>已有一级邮箱域名服务（mail.mydomain.com），现添加二级域名（mail.mails.mydomian.com）的邮件服务，将其cname到阿里云的邮件服务器上。<br><img src="http://mufool.qiniudn.com/domain/domain-mail-2.jpg" alt="domain-mail-2"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MX（Mail-Exchanger）记录&quot;&gt;&lt;a href=&quot;#MX（Mail-Exchanger）记录&quot; class=&quot;headerlink&quot; title=&quot;MX（Mail Exchanger）记录&quot;&gt;&lt;/a&gt;MX（Mail Exchanger）记录&lt;/h2&gt;&lt;p&gt;MX是邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据 收信人的地址后缀来定位邮件服务器。例如，当Internet上的某用户要发一封信给 user@mydomain.com 时，该用户的邮件系统通过DNS查找mydomain.com这个域名的MX记录，如果MX记录存在， 用户计算机就将邮件发送到MX记录所指定的邮件服务器上。 MX记录也叫做邮件路由记录，用户可以将该域名下的邮件服务器指向到自己的mail server上，然后即可自行操控所有的邮箱设置 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DOMAIN" scheme="http://mufool.com/tags/DOMAIN/"/>
    
  </entry>
  
  <entry>
    <title>Spark中redis连接池的几种使用方法</title>
    <link href="http://mufool.com/2017/07/04/spark-redis/"/>
    <id>http://mufool.com/2017/07/04/spark-redis/</id>
    <published>2017-07-04T09:37:11.000Z</published>
    <updated>2017-09-08T03:45:38.065Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;spark是一个大数据的分布式的计算框架，他的工作机制核心也是分布式，所以很多地方的使用一定要先理解它的工作机制，很多问题和性能优化都和spark的工作机制紧密相关。<br>&emsp;&emsp;这里主要介绍spark中redis的几种使用方法，通过使用方法理解spark的工作机制。</p><a id="more"></a><h2 id="方法一：Master上集中处理"><a href="#方法一：Master上集中处理" class="headerlink" title="方法一：Master上集中处理"></a>方法一：Master上集中处理</h2><p>&emsp;&emsp;Spark采用了分布式计算中的Master-Slave模型。Master作为整个集群的控制器，负责整个集群的正常运行；Worker是计算节点，接受主节点命令以及进行状态汇报。这种方式便是将Worker上的所有数据收集到Master上，然后遍历写入redis。</p><p>TestRedisPool代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRedisPool</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> JedisPool pool = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestRedisPool</span><span class="params">(String ip, <span class="keyword">int</span> port, String passwd, <span class="keyword">int</span> database)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (pool == <span class="keyword">null</span>) &#123;</div><div class="line">JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</div><div class="line">config.setMaxTotal(<span class="number">500</span>);</div><div class="line">config.setMaxIdle(<span class="number">30</span>);</div><div class="line">config.setMinIdle(<span class="number">5</span>);</div><div class="line">config.setMaxWaitMillis(<span class="number">1000</span> * <span class="number">10</span>);</div><div class="line">config.setTestWhileIdle(<span class="keyword">false</span>);</div><div class="line">config.setTestOnBorrow(<span class="keyword">false</span>);</div><div class="line">config.setTestOnReturn(<span class="keyword">false</span>);</div><div class="line">pool = <span class="keyword">new</span> JedisPool(config, ip, port, <span class="number">10000</span>, passwd, database);</div><div class="line">Logs.debug(<span class="string">"init:"</span> + pool);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> JedisPool <span class="title">getRedisPool</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> pool;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(String key,String value)</span></span>&#123;</div><div class="line">Jedis jedis = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">jedis = pool.getResource();</div><div class="line"><span class="keyword">return</span> jedis.set(key, value);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line"><span class="keyword">return</span> <span class="string">"0"</span>;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">jedis.close();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>示例代码如下，rdd对应在三个分区上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>, <span class="string">"e"</span>);</div><div class="line">JavaRDD&lt;String&gt; javaRDD = <span class="keyword">new</span> JavaSparkContext(spark.sparkContext()).parallelize(list, <span class="number">3</span>);</div><div class="line"></div><div class="line">TestRedisPool testRedisPool = <span class="keyword">new</span> TestRedisPool(redisIp, port, passwd, dbNum);</div><div class="line">List&lt;String&gt; lst = javaRDD.collect();</div><div class="line"></div><div class="line"><span class="keyword">for</span>(String s:lst) &#123;</div><div class="line">testRedisPool.set(s, getDateString2(<span class="number">0</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&emsp;&emsp;所有数据collect到Master上，只需要建立一个redis连接池处理。虽然减少了redis连接数，但是所有数据需要collect到Master上，大数据量的处理对Master压力较大，性能较差。</p><h2 id="方法二：Worker上遍历所有数据"><a href="#方法二：Worker上遍历所有数据" class="headerlink" title="方法二：Worker上遍历所有数据"></a>方法二：Worker上遍历所有数据</h2><p>&emsp;&emsp;spark中所有的数据处理分为Tranformation和Action，foreach就是一个Action，通过foreach按分区遍历所有的数据进行处理，这种情况下输出只能在分区上看到，Master上无法看到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">javaRDD.foreach(<span class="keyword">new</span> VoidFunction&lt;String&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">TestRedisPool testRedisPool = <span class="keyword">new</span> TestRedisPool(redisIp, port, passwd, dbNum);</div><div class="line">Logs.debug(testRedisPool.getRedisPool());</div><div class="line">testRedisPool.set(s, getDateString2(<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Worker上的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2017-07-04 12:59:18 DEBUG: redis.clients.jedis.JedisPool@6bc8c6df</div><div class="line">2017-07-04 12:59:18 DEBUG: redis.clients.jedis.JedisPool@46c2ca89</div><div class="line">2017-07-04 12:59:18 DEBUG: redis.clients.jedis.JedisPool@ac221bf</div><div class="line">2017-07-04 12:59:18 DEBUG: redis.clients.jedis.JedisPool@1bccc548</div><div class="line">2017-07-04 12:59:18 DEBUG: redis.clients.jedis.JedisPool@25c1ef20</div></pre></td></tr></table></figure><p>&emsp;&emsp;按分区历所有元素，TestRedisPool不需要实现序列化；每一个RDD中的元素都需要创建很多的redis连接池，即便使用短连接也会对redis造成很大的压力。效率也是极其低下的。</p><h2 id="方法三：Master上创建，Worker上遍历所有数据"><a href="#方法三：Master上创建，Worker上遍历所有数据" class="headerlink" title="方法三：Master上创建，Worker上遍历所有数据"></a>方法三：Master上创建，Worker上遍历所有数据</h2><p>&emsp;&emsp;如果在Master上创建一个实例，在进行分区遍历时使用Master上创建的实例，这种方式是可以的，只需要将类实现序列即可。同时还可以通过广播变量，将实例在Worker上持久化，减少实例使用时的网络传输。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">TestRedisPool testRedisPool = <span class="keyword">new</span> TestRedisPool(redisIp, port, passwd, dbNum);</div><div class="line">javaRDD.foreach(<span class="keyword">new</span> VoidFunction&lt;String&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">Logs.debug(testRedisPool.getRedisPool());</div><div class="line">testRedisPool.set(s, getDateString2(<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> org.apache.spark.SparkException: Task not serializable</div><div class="line">...</div><div class="line">Serialization stack:</div><div class="line">- object not serializable (class: redis.clients.jedis.JedisPool, value: redis.clients.jedis.JedisPool@3e4f80cb)</div></pre></td></tr></table></figure><p>&emsp;&emsp;报错jedispool无法序列化，即使TestRedisPool类实现了序列化，但因为其成员变量jedispool本身并不支持序列化，所以这种方式在有成员变量无法序列化时也不可用。</p><h2 id="方法四：Worker上按分区遍历"><a href="#方法四：Worker上按分区遍历" class="headerlink" title="方法四：Worker上按分区遍历"></a>方法四：Worker上按分区遍历</h2><p>&emsp;&emsp;<code>foreachPartitions</code>也是一个Action操作，<code>foreach</code>和<code>foreachPartitions</code>的实现如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreach</span></span>(f: <span class="type">T</span> =&gt; <span class="type">Unit</span>) &#123;</div><div class="line"><span class="keyword">val</span> cleanF = sc.clean(f)</div><div class="line">sc.runJob(<span class="keyword">this</span>, (iter: <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; iter.foreach(cleanF))</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreachPartition</span></span>(f: <span class="type">Iterator</span>[<span class="type">T</span>] =&gt; <span class="type">Unit</span>) &#123;</div><div class="line"><span class="keyword">val</span> cleanF = sc.clean(f)</div><div class="line">sc.runJob(<span class="keyword">this</span>, (iter: <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; cleanF(iter))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&emsp;&emsp;<code>foreach</code>是使用提供的函数调用分区迭代器的<code>foreach</code>处理，<code>foreachPartition</code>是直接传入的是分区的指针。所以，其实<code>foreach</code>和<code>foreachPartition</code>并没有什么区别，<code>foreachPartition</code>只是让你有机会在迭代器的循环之外做一些事情，通常是像数据库连接或者redis等。所以，如果你没有任何可以对每个分区的迭代器做一次，并在整个过程中重复使用的操作，建议还是使用<code>foreach</code>来提高清晰度和降低复杂度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">javaRDD.foreachPartition(<span class="keyword">new</span> VoidFunction&lt;Iterator&lt;String&gt;&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Iterator&lt;String&gt; stringIterator)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">TestRedisPool testRedisPool = <span class="keyword">new</span> TestRedisPool(redisIp, port, passwd, dbNum);</div><div class="line"><span class="keyword">while</span> (stringIterator.hasNext()) &#123;</div><div class="line">Logs.debug(testRedisPool.getRedisPool());</div><div class="line">testRedisPool.set(stringIterator.next(), getDateString2(<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Worker上的输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2017-07-04 13:30:29 DEBUG: redis.clients.jedis.JedisPool@21545755</div><div class="line">2017-07-04 13:30:29 DEBUG: redis.clients.jedis.JedisPool@111b1ab4</div><div class="line">2017-07-04 13:30:29 DEBUG: redis.clients.jedis.JedisPool@2b9b3bd5</div><div class="line">2017-07-04 13:30:29 DEBUG: redis.clients.jedis.JedisPool@21545755</div><div class="line">2017-07-04 13:30:29 DEBUG: redis.clients.jedis.JedisPool@111b1ab4</div></pre></td></tr></table></figure><p>&emsp;&emsp;TestRedisPool不需要实现序列化，每个分区只需要创建一个redis连接池，正常情况下会创建和线程数一样多的连成池，这种情况下，redis连接池数量明显减少。</p><p>&emsp;&emsp;TestRedisPool在Master上定义时，和方法三种一样，同样因为jedispool无法序列化报错。</p><h2 id="方法五：使用静态类型，按分区遍历"><a href="#方法五：使用静态类型，按分区遍历" class="headerlink" title="方法五：使用静态类型，按分区遍历"></a>方法五：使用静态类型，按分区遍历</h2><p>&emsp;&emsp;在方法四中，我们可以做到在每个分区上建立连接池，但是每台机器一般对应多个分区，怎么进一步减少连接池的创建呢。我们知道静态类型全局只有一份，如果将redis连接池定义为静态类型，做到每个worker上只创建一个redis连接池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRedisPool</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> JedisPool pool = <span class="keyword">null</span>;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">TestRedisPool testRedisPool = <span class="keyword">new</span> TestRedisPool(redisIp, port, passwd, dbNum);</div><div class="line">javaRDD.foreachPartition(<span class="keyword">new</span> VoidFunction&lt;Iterator&lt;String&gt;&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Iterator&lt;String&gt; stringIterator)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">while</span> (stringIterator.hasNext()) &#123;</div><div class="line">Logs.debug(testRedisPool.getRedisPool());</div><div class="line">testRedisPool.set(stringIterator.next(), getDateString2(<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>这种在Master上创建TestRedisPool实例的方式，在worker上无法获取到，会报<code>java.lang.NullPointerException</code>异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">javaRDD.foreachPartition(<span class="keyword">new</span> VoidFunction&lt;Iterator&lt;String&gt;&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Iterator&lt;String&gt; stringIterator)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">TestRedisPool testRedisPool = <span class="keyword">new</span> TestRedisPool(redisIp, port, passwd, dbNum);</div><div class="line"><span class="keyword">while</span> (stringIterator.hasNext()) &#123;</div><div class="line">Logs.debug(testRedisPool.getRedisPool());</div><div class="line">testRedisPool.set(stringIterator.next(), getDateString2(<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Worker输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">2017-07-04 16:38:04 DEBUG: init:redis.clients.jedis.JedisPool@416605b2</div><div class="line">2017-07-04 16:38:04 DEBUG: init:redis.clients.jedis.JedisPool@416605b2</div><div class="line">2017-07-04 16:38:04 DEBUG: redis.clients.jedis.JedisPool@416605b2</div><div class="line">2017-07-04 16:38:04 DEBUG: redis.clients.jedis.JedisPool@416605b2</div><div class="line">2017-07-04 16:38:04 DEBUG: init:redis.clients.jedis.JedisPool@416605b2</div><div class="line">2017-07-04 16:38:04 DEBUG: redis.clients.jedis.JedisPool@416605b2</div><div class="line">2017-07-04 16:38:04 DEBUG: redis.clients.jedis.JedisPool@416605b2</div><div class="line">2017-07-04 16:38:04 DEBUG: redis.clients.jedis.JedisPool@416605b2</div></pre></td></tr></table></figure><p>&emsp;&emsp;TestRedisPool也不需要序列化。因为本实验环境中只有一个worker节点，所以这里看到始终只有一个redis连接池实例。这种情况下是在分区上分别创建实例，分区对应的就是虚拟线程的个数，所以相当于3个线程同时去获取jedispool实现，所以一共init了三次。如果做成单例模式就能解决init多次的问题。</p><h2 id="方法六：使用单例模式，按分区遍历"><a href="#方法六：使用单例模式，按分区遍历" class="headerlink" title="方法六：使用单例模式，按分区遍历"></a>方法六：使用单例模式，按分区遍历</h2><p>jedispool使用单例模式实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRedisPool</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> JedisPool pool = <span class="keyword">null</span>;</div><div class="line">String ip;</div><div class="line">Integer port;</div><div class="line">String passwd;</div><div class="line">Integer database;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestRedisPool</span><span class="params">(String ip, <span class="keyword">int</span> port, String passwd, <span class="keyword">int</span> database)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.ip = ip;</div><div class="line"><span class="keyword">this</span>.port = port;</div><div class="line"><span class="keyword">this</span>.passwd = passwd;</div><div class="line"><span class="keyword">this</span>.database = database;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> JedisPool <span class="title">getRedisPool</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (pool == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="keyword">synchronized</span> (RedisUtils.class) &#123;</div><div class="line"><span class="keyword">if</span> (pool == <span class="keyword">null</span>) &#123;</div><div class="line">JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</div><div class="line">config.setMaxTotal(<span class="number">500</span>);</div><div class="line">config.setMaxIdle(<span class="number">30</span>);</div><div class="line">config.setMinIdle(<span class="number">5</span>);</div><div class="line">config.setMaxWaitMillis(<span class="number">1000</span> * <span class="number">10</span>);</div><div class="line">config.setTestWhileIdle(<span class="keyword">false</span>);</div><div class="line">config.setTestOnBorrow(<span class="keyword">false</span>);</div><div class="line">config.setTestOnReturn(<span class="keyword">false</span>);</div><div class="line">pool = <span class="keyword">new</span> JedisPool(config, ip, port, <span class="number">10000</span>, passwd, database);</div><div class="line">Logs.debug(<span class="string">"init:"</span> + pool);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pool;</div><div class="line">&#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&emsp;&emsp;以上<code>volatile</code>保证当jedispool未初始化完成是不能被获取到，<code>synchronized</code>解决多线程冲突的问题。这两个关键词的使用其实也就是<code>lazy initialize</code>的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">javaRDD.foreachPartition(<span class="keyword">new</span> VoidFunction&lt;Iterator&lt;String&gt;&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Iterator&lt;String&gt; stringIterator)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">TestRedisPool testRedisPool = <span class="keyword">new</span> TestRedisPool(redisIp, port, passwd, dbNum);</div><div class="line"><span class="keyword">while</span> (stringIterator.hasNext()) &#123;</div><div class="line">Logs.debug(<span class="string">"class:"</span> + testRedisPool );</div><div class="line">Logs.debug(<span class="string">"pool:"</span> + testRedisPool .getRedisPool());</div><div class="line">testRedisPool .set(stringIterator.next(), getDateString2(<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>节点上输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">2017-07-04 17:13:48 DEBUG: class:test.TestRedisPool@4ac996de</div><div class="line">2017-07-04 17:13:48 DEBUG: class:test.TestRedisPool@7f6973f9</div><div class="line">2017-07-04 17:13:48 DEBUG: class:test.TestRedisPool@1e24e8f6</div><div class="line">2017-07-04 17:13:48 DEBUG: init:redis.clients.jedis.JedisPool@68caaac</div><div class="line">2017-07-04 17:13:48 DEBUG: pool:redis.clients.jedis.JedisPool@68caaac</div><div class="line">2017-07-04 17:13:48 DEBUG: pool:redis.clients.jedis.JedisPool@68caaac</div><div class="line">2017-07-04 17:13:48 DEBUG: pool:redis.clients.jedis.JedisPool@68caaac</div><div class="line">2017-07-04 17:13:48 DEBUG: class:test.TestRedisPool@7f6973f9</div><div class="line">2017-07-04 17:13:48 DEBUG: pool:redis.clients.jedis.JedisPool@68caaac</div><div class="line">2017-07-04 17:13:48 DEBUG: class:test.TestRedisPool@1e24e8f6</div><div class="line">2017-07-04 17:13:48 DEBUG: pool:redis.clients.jedis.JedisPool@68caaac</div></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到现在jedispool只init了一次，并且全局也只有一个jedispool。但是现在TestRedisPool对象还是被创建了多个，改为在Master上定义，并已广播变量的形式分发到Worker上可以解决这个问题，这种情况下TestRedisPool需要序列化。</p><h2 id="方法七：使用单例模式，Driver上定义，分区上遍历"><a href="#方法七：使用单例模式，Driver上定义，分区上遍历" class="headerlink" title="方法七：使用单例模式，Driver上定义，分区上遍历"></a>方法七：使用单例模式，Driver上定义，分区上遍历</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">TestRedisPool testRedisPool = <span class="keyword">new</span> TestRedisPool(redisIp, port, passwd, dbNum);</div><div class="line"><span class="keyword">final</span> Broadcast&lt;TestRedisPool&gt; broadcastRedis = <span class="keyword">new</span> JavaSparkContext(spark.sparkContext()).broadcast(testRedisPool);</div><div class="line">javaRDD.foreachPartition(<span class="keyword">new</span> VoidFunction&lt;Iterator&lt;String&gt;&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Iterator&lt;String&gt; stringIterator)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">TestRedisPool redisClient1 = broadcastRedis.getValue();</div><div class="line"><span class="keyword">while</span> (stringIterator.hasNext()) &#123;</div><div class="line">Logs.debug(<span class="string">"class:"</span> + redisClient1);</div><div class="line">Logs.debug(<span class="string">"pool:"</span> + redisClient1.getRedisPool());</div><div class="line">redisClient1.set(stringIterator.next(), getDateString2(<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>输出如下，类实例和redispool都只创建一次，也使用同一个。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">2017-07-04 17:17:32 DEBUG: class:test.TestRedisPool@62044018</div><div class="line">2017-07-04 17:17:32 DEBUG: class:test.TestRedisPool@62044018</div><div class="line">2017-07-04 17:17:32 DEBUG: class:test.TestRedisPool@62044018</div><div class="line">2017-07-04 17:17:32 DEBUG: init:redis.clients.jedis.JedisPool@3a820c05</div><div class="line">2017-07-04 17:17:32 DEBUG: pool:redis.clients.jedis.JedisPool@3a820c05</div><div class="line">2017-07-04 17:17:32 DEBUG: pool:redis.clients.jedis.JedisPool@3a820c05</div><div class="line">2017-07-04 17:17:32 DEBUG: pool:redis.clients.jedis.JedisPool@3a820c05</div><div class="line">2017-07-04 17:17:32 DEBUG: class:test.TestRedisPool@62044018</div><div class="line">2017-07-04 17:17:32 DEBUG: pool:redis.clients.jedis.JedisPool@3a820c05</div><div class="line">2017-07-04 17:17:32 DEBUG: class:test.TestRedisPool@62044018</div><div class="line">2017-07-04 17:17:32 DEBUG: pool:redis.clients.jedis.JedisPool@3a820c05</div></pre></td></tr></table></figure><p>&emsp;&emsp;现在是TestRedisPool在Master上定义，广播到各个Worker上；同时jedispool在每台worker上也始终只会有一个实例存在。但是也会有人会疑问，为什么jedispool现在没有序列化的问题（方法三），或者定义成静态导致worker上获取不到jedispool（方法五第一种情况）的问题。这是因为，方法三中jedispool为普通类型是，和类一起序列化，因为其本身不支持序列化，所以报错；方法五中，定义成静态类型之后，静态类型不属于类，所以TestRedisPool序列化不会出错，但是因为jedispool在Master上定义和初始化，不会传输到节点上，节点上获取到的jedispool都为null，所以报错。而方法七中使用懒启动的方式，在使用的是才会初始化jedispool，所以实际是在节点上完成的初始化，所以不会有问题。</p><p>参考：<br><a href="https://www.zhihu.com/question/29971746" target="_blank" rel="external">Java中单例模式实现</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;spark是一个大数据的分布式的计算框架，他的工作机制核心也是分布式，所以很多地方的使用一定要先理解它的工作机制，很多问题和性能优化都和spark的工作机制紧密相关。&lt;br&gt;&amp;emsp;&amp;emsp;这里主要介绍spark中redis的几种使用方法，通过使用方法理解spark的工作机制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SPARK" scheme="http://mufool.com/tags/SPARK/"/>
    
      <category term="REDIS" scheme="http://mufool.com/tags/REDIS/"/>
    
  </entry>
  
  <entry>
    <title>Spark序列化</title>
    <link href="http://mufool.com/2017/07/03/spark-serialization/"/>
    <id>http://mufool.com/2017/07/03/spark-serialization/</id>
    <published>2017-07-03T02:20:52.000Z</published>
    <updated>2017-09-08T03:45:38.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是序列化"><a href="#什么是序列化" class="headerlink" title="什么是序列化"></a>什么是序列化</h2><p>&emsp;&emsp;对象的序列化（Serialization）用于将对象编码成一个字节流，以及从字节流中重新构建对象。将一个对象编码成一个字节流称为序列化该对象（Serializing）；相反的处理过程称为反序列化（Deserializing）。</p><a id="more"></a><p>序列化有三种主要的用途：</p><ul><li>作为一种持久化格式：一个对象被序列化以后，它的编码可以被存储到磁盘上，供以后反序列化用。</li><li>作为一种通信数据格式：序列化结果可以从一个正在运行的虚拟机，通过网络被传递到另一个虚拟机上。</li><li>作为一种拷贝、克隆（clone）机制：将对象序列化到内存的缓存区中，然后通过反序列化，可以得到一个对已存对象进行深拷贝的新对象。<br>在分布式数据处理中，主要使用上面提到的前两种功能：数据持久化和通信数据格式。</li></ul><h2 id="为什么要序列化"><a href="#为什么要序列化" class="headerlink" title="为什么要序列化"></a>为什么要序列化</h2><p>&emsp;&emsp;在写Spark的应用时，尝尝会碰到序列化的问题。例如，在Driver端的程序中创建了一个对象，而在各个Executor中会用到这个对象 ，由于Driver端代码与Executor端的代码运行在不同的JVM中，甚至在不同的节点上，因此必然要有相应的序列化机制来支撑数据实例在不同的JVM或者节点之间的传输。</p><h2 id="什么情况下需要序列化"><a href="#什么情况下需要序列化" class="headerlink" title="什么情况下需要序列化"></a>什么情况下需要序列化</h2><p>以下一段spark代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransKey</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> String prefix;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TransKey</span><span class="params">()</span> </span>&#123;</div><div class="line">prefix = <span class="string">"news_"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addPrefix</span><span class="params">(String s)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> prefix + s;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</div><div class="line">JavaRDD&lt;String&gt; javaRDD = <span class="keyword">new</span> JavaSparkContext(spark.sparkContext()).parallelize(list);</div><div class="line"></div><div class="line">TransKey transKey = <span class="keyword">new</span> TransKey();</div><div class="line">JavaRDD&lt;String&gt; javaRDD1 = javaRDD.map(s -&gt; transKey.addPrefix(s));</div></pre></td></tr></table></figure><p>&emsp;&emsp;以上代码执行是会报错<code>org.apache.spark.SparkException: Task not serializable</code>，因为transkey在执行过程中需要从Driver传输到Executor。为Executor没有引用到Driver的实例。因此<code>TransKey</code>类需要实现序列化。</p><h2 id="实现序列化"><a href="#实现序列化" class="headerlink" title="实现序列化"></a>实现序列化</h2><p>Spark可以使用Java的序列化框架。只要一个class实现了java.io.Serializable接口，那么Spark就能使用Java的ObjectOutputStream来序列化该类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransKey</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于用户自定义类，通过以上方法实现序列化即可正常使用。Spark还支持另一种序列化框架Kryo。Kryo是一个高效的序列化框架（可以比Java的序列化快10倍以上）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtilKryo</span> <span class="keyword">implements</span> <span class="title">KryoSerializable</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> object pool = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">private</span> Integer port;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Kryo kryo, Output output)</span> </span>&#123;</div><div class="line">kryo.writeClassAndObject(output, pool);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Kryo kryo, Input input)</span> </span>&#123;</div><div class="line">pool = kryo.readClassAndObject(input);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>参考：<br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html" target="_blank" rel="external">Java 序列化的高级认识</a><br><a href="https://segmentfault.com/a/1190000006250481" target="_blank" rel="external">spark-stream 访问 Redis</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是序列化&quot;&gt;&lt;a href=&quot;#什么是序列化&quot; class=&quot;headerlink&quot; title=&quot;什么是序列化&quot;&gt;&lt;/a&gt;什么是序列化&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;对象的序列化（Serialization）用于将对象编码成一个字节流，以及从字节流中重新构建对象。将一个对象编码成一个字节流称为序列化该对象（Serializing）；相反的处理过程称为反序列化（Deserializing）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SPARK" scheme="http://mufool.com/tags/SPARK/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加disqus评论</title>
    <link href="http://mufool.com/2017/06/19/hexo-disqus/"/>
    <id>http://mufool.com/2017/06/19/hexo-disqus/</id>
    <published>2017-06-19T04:42:28.000Z</published>
    <updated>2017-09-12T01:54:47.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册disqus"><a href="#注册disqus" class="headerlink" title="注册disqus"></a>注册disqus</h2><p>disqus<a href="https://disqus.com" target="_blank" rel="external">官网</a>，按要求注册一个账户，添加你的博客地址</p><h2 id="获取shortname"><a href="#获取shortname" class="headerlink" title="获取shortname"></a>获取shortname</h2><p>在Settings-&gt;General下可以看到你的Shortname。</p><h2 id="添加到blog"><a href="#添加到blog" class="headerlink" title="添加到blog"></a>添加到blog</h2><p>打开根目录下的config.yml, 在最后面添加，disqus_shortname: your_disqus_short_name，去掉其他评论配置。</p><p>刷新页面即可看到评论系统。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;注册disqus&quot;&gt;&lt;a href=&quot;#注册disqus&quot; class=&quot;headerlink&quot; title=&quot;注册disqus&quot;&gt;&lt;/a&gt;注册disqus&lt;/h2&gt;&lt;p&gt;disqus&lt;a href=&quot;https://disqus.com&quot; target=&quot;_bl
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://mufool.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Redis安装配置</title>
    <link href="http://mufool.com/2017/06/16/redis-install/"/>
    <id>http://mufool.com/2017/06/16/redis-install/</id>
    <published>2017-06-16T11:48:38.000Z</published>
    <updated>2017-09-08T03:45:38.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar -zxvf redis-2.8.12.tar.gz</div><div class="line"><span class="built_in">cd</span> redis-2.8.19 </div><div class="line">make</div><div class="line">make PREFIX=/opt/modules/redis</div></pre></td></tr></table></figure><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir /opt/modules/redis/etc/</div><div class="line">cp redis.conf /opt/modules/redis/etc/ </div><div class="line"><span class="built_in">cd</span> /opt/modules/redis/bin/</div><div class="line">cp redis-benchmark redis-cli redis-server /usr/bin/</div></pre></td></tr></table></figure><p>内存调整</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#此参数可用的值为0,1,2 </span></div><div class="line"><span class="comment">#0表示当用户空间请求更多的内存时，内核尝试估算出可用的内存 </span></div><div class="line"><span class="comment">#1表示内核允许超量使用内存直到内存用完为止 </span></div><div class="line"><span class="comment">#2表示整个内存地址空间不能超过swap+(vm.overcommit_ratio)%的RAM值 </span></div><div class="line"><span class="built_in">echo</span> <span class="string">"vm.overcommit_memory=1"</span>&gt;&gt;/etc/sysctl.conf</div><div class="line">sysctl -p</div></pre></td></tr></table></figure><p>修改redis配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">vim /opt/modules/redis/etc/redis.conf</div><div class="line"></div><div class="line"><span class="comment">#配置监听地址</span></div><div class="line"><span class="built_in">bind</span> 127.0.0.1 192.168.193.228 119.18.193.228</div><div class="line"></div><div class="line"><span class="comment">#配置监听端口</span></div><div class="line">port 6379</div><div class="line"></div><div class="line"><span class="comment"># 配置log文件位置</span></div><div class="line">logfile <span class="string">"/opt/redis/log.txt"</span></div><div class="line"></div><div class="line"><span class="comment"># 写文件条件</span></div><div class="line">save 900 1</div><div class="line">save 300 10</div><div class="line">save 60 10000</div><div class="line"></div><div class="line"><span class="comment"># 写文件名</span></div><div class="line">dbfilename dump.rdb</div><div class="line"></div><div class="line"><span class="comment">#密码设置</span></div><div class="line">requirepass bfsportsdt</div><div class="line"></div><div class="line"><span class="comment">##修改命名及禁止</span></div><div class="line">rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c28</div><div class="line">rename-command FLUSHALL <span class="string">""</span></div><div class="line">rename-command FLUSHDB <span class="string">""</span></div></pre></td></tr></table></figure><h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#chkconfig: 2345 80 90</span></div><div class="line"><span class="comment"># Simple Redis init.d script conceived to work on Linux systems</span></div><div class="line"><span class="comment"># as it does use of the /proc filesystem.</span></div><div class="line"></div><div class="line">PATH=/usr/<span class="built_in">local</span>/bin:/sbin:/usr/bin:/bin</div><div class="line">REDISPORT=6379</div><div class="line">EXEC=/opt/modules/redis/bin/redis-server</div><div class="line">REDIS_CLI=/opt/modules/redis/bin/redis-cli</div><div class="line">   </div><div class="line">PIDFILE=/var/run/redis.pid</div><div class="line">CONF=<span class="string">"/opt/modules/redis/etc/redis.conf"</span></div><div class="line">   </div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">    start)</div><div class="line">        <span class="keyword">if</span> [ -f <span class="variable">$PIDFILE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span></div><div class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        <span class="keyword">if</span> [ <span class="string">"$?"</span>=<span class="string">"0"</span> ] </div><div class="line">        <span class="keyword">then</span></div><div class="line">              <span class="built_in">echo</span> <span class="string">"Redis is running..."</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        <span class="keyword">if</span> [ ! -f <span class="variable">$PIDFILE</span> ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> does not exist, process is not running"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)</div><div class="line">                <span class="built_in">echo</span> <span class="string">"Stopping ..."</span></div><div class="line">                <span class="variable">$REDIS_CLI</span> -p <span class="variable">$REDISPORT</span> SHUTDOWN</div><div class="line">                <span class="keyword">while</span> [ -x <span class="variable">$&#123;PIDFILE&#125;</span> ]</div><div class="line">               <span class="keyword">do</span></div><div class="line">                    <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown ..."</span></div><div class="line">                    sleep 1</div><div class="line">                <span class="keyword">done</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"Redis stopped"</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        ;;</div><div class="line">   restart|force-reload)</div><div class="line">        <span class="variable">$&#123;0&#125;</span> stop</div><div class="line">        <span class="variable">$&#123;0&#125;</span> start</div><div class="line">        ;;</div><div class="line">  *)</div><div class="line">    <span class="built_in">echo</span> <span class="string">"Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;"</span> &gt;&amp;2</div><div class="line">        <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure><h2 id="redis开机自启动"><a href="#redis开机自启动" class="headerlink" title="redis开机自启动"></a>redis开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 复制脚本文件到init.d目录下</span></div><div class="line">cp redis /etc/init.d/</div><div class="line"></div><div class="line"><span class="comment"># 给脚本增加运行权限</span></div><div class="line">chmod +x /etc/init.d/redis</div><div class="line"></div><div class="line"><span class="comment"># 查看服务列表</span></div><div class="line">chkconfig --list</div><div class="line"></div><div class="line"><span class="comment"># 添加服务</span></div><div class="line">chkconfig --add redis</div><div class="line"></div><div class="line"><span class="comment"># 配置启动级别</span></div><div class="line">chkconfig --level 2345 redis on</div><div class="line"></div><div class="line"><span class="comment">#启动停止</span></div><div class="line">service redis start   <span class="comment">#或者 /etc/init.d/redis start  </span></div><div class="line">service redis stop   <span class="comment">#或者 /etc/init.d/redis stop</span></div></pre></td></tr></table></figure><p>参考：<br><a href="http://www.cnblogs.com/zhoujinyi/archive/2013/05/26/3098508.html" target="_blank" rel="external">NoSQL之【Redis】学习（三）：Redis持久化 Snapshot和AOF说明</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tar -zxvf redis-2.8.12.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; redis-2.8.19 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make PREFIX=/opt/modules/redis&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="REDIS" scheme="http://mufool.com/tags/REDIS/"/>
    
  </entry>
  
  <entry>
    <title>Nginx编译安装</title>
    <link href="http://mufool.com/2017/06/16/nginx-install/"/>
    <id>http://mufool.com/2017/06/16/nginx-install/</id>
    <published>2017-06-16T11:48:32.000Z</published>
    <updated>2017-09-12T01:55:04.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">tar xzvf nginx-1.10.1.tar.gz</div><div class="line">cd nginx-1.10.1</div><div class="line">./configure \</div><div class="line">--prefix=/opt/modules/nginx \</div><div class="line">--sbin-path=/opt/modules/nginx/sbin/nginx \</div><div class="line">--conf-path=/opt/modules/nginx/conf/nginx.conf \</div><div class="line">--error-log-path=/var/log/nginx/error.log \</div><div class="line">--http-log-path=/var/log/nginx/access.log \</div><div class="line">--pid-path=/var/run/nginx/nginx.pid \</div><div class="line">--lock-path=/var/lock/nginx.lock \</div><div class="line">--user=nginx --group=nginx \</div><div class="line">--with-http_ssl_module \</div><div class="line">--with-http_stub_status_module \</div><div class="line">--with-http_gzip_static_module \</div><div class="line">--http-client-body-temp-path=/opt/modules/nginx/client_body_temp/ \</div><div class="line">--http-proxy-temp-path=/opt/modules/nginx/nginx_proxy/ \</div><div class="line">--http-fastcgi-temp-path=/opt/modules/nginx/fastcgi_temp/ \</div><div class="line">--add-module=../redis2-nginx-module-0.13 \</div><div class="line">--add-module=../nginx-http-concat-1.2.2</div><div class="line">make</div></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">make install</div><div class="line">cp objs/nginx  /usr/local/bin/</div><div class="line">groupadd nginx</div><div class="line">useradd -g nginx nginx</div><div class="line">cp init.d/nginx /etc/init.d/</div><div class="line">chmod 755 /etc/init.d/nginx</div></pre></td></tr></table></figure><h2 id="添加开机启动"><a href="#添加开机启动" class="headerlink" title="添加开机启动"></a>添加开机启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/sbin/chkconfig --add nginx</div><div class="line">/sbin/chkconfig --level 35 nginx on</div><div class="line">/sbin/service nginx start</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h2&gt;
    
    </summary>
    
    
      <category term="NGINX" scheme="http://mufool.com/tags/NGINX/"/>
    
  </entry>
  
  <entry>
    <title>IO多路复用</title>
    <link href="http://mufool.com/2017/06/09/io-multi-reuse/"/>
    <id>http://mufool.com/2017/06/09/io-multi-reuse/</id>
    <published>2017-06-09T06:53:03.000Z</published>
    <updated>2017-09-08T03:45:38.064Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="TCP/IP" scheme="http://mufool.com/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>Flume安装使用</title>
    <link href="http://mufool.com/2017/06/09/hadoop-flume/"/>
    <id>http://mufool.com/2017/06/09/hadoop-flume/</id>
    <published>2017-06-09T06:42:43.000Z</published>
    <updated>2017-09-13T02:42:11.160Z</updated>
    
    <content type="html"><![CDATA[<p>Flume NG是Cloudera提供的一个分布式、可靠、可用的系统，它能够将不同数据源的海量日志数据进行高效收集、聚合、移动，最后存储到一个中心化数据存储系统中。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://mirrors.hust.edu.cn/apache/flume/1.7.0/apache-flume-1.7.0-bin.tar.gz </div><div class="line">tar -xzvf apache-flume-1.7.0-bin.tar.gz</div></pre></td></tr></table></figure><p>添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#java</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/opt/flume/jdk1.7.0_79</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$PATH</span></div><div class="line"></div><div class="line"><span class="comment">#flume</span></div><div class="line"><span class="built_in">export</span> FLUME_HOME=/opt/flume/flume-1.7.0</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$FLUME_HOME</span>/bin</div></pre></td></tr></table></figure><p>flume需要的是java7</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>conf下添加一个配置文件，flume-tail.conf，添加如下内容，这里主要测试的是tail文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">agent.sources = src1 </div><div class="line">agent.channels = ch1</div><div class="line">agent.sinks = sink1</div><div class="line"></div><div class="line"><span class="comment"># For each one of the sources, the type is defined</span></div><div class="line">agent.sources.src1.type = <span class="built_in">exec</span></div><div class="line">agent.sources.src1.command=tail -F /opt/data/1.txt</div><div class="line">agent.sources.src1.channels = ch1</div><div class="line"></div><div class="line"><span class="comment"># Each sink's type must be defined</span></div><div class="line">agent.sinks.sink1.type = org.apache.flume.sink.kafka.KafkaSink</div><div class="line">agent.sinks.sink1.kafka.bootstrap.servers = 103.15.202.158:9092</div><div class="line">agent.sinks.sink1.partitioner.class=org.apache.flume.plugins.SinglePartition</div><div class="line">agent.sinks.sink1.kafka.topic=<span class="built_in">test</span></div><div class="line">agent.sinks.sink1.serializer.class=kafka.serializer.StringEncoder</div><div class="line">agent.sinks.sink1.channel = ch1</div><div class="line"></div><div class="line"><span class="comment"># Each channel's type is defined.</span></div><div class="line">agent.channels.ch1.type = memory</div><div class="line">agent.channels.ch1.capacity = 100</div></pre></td></tr></table></figure><p>Flume Source 支持的类型：</p><table><thead><tr><th>Source类型</th><th>说明</th></tr></thead><tbody><tr><td>Avro Source</td><td>支持Avro协议（实际上是Avro RPC），内置支持     </td></tr><tr><td>Thrift Source</td><td>支持Thrift协议，内置支持     </td></tr><tr><td>Exec Source</td><td>基于Unix的command在标准输出上生产数据</td></tr><tr><td>JMS Source</td><td>从JMS系统（消息、主题）中读取数据，ActiveMQ已经测试过     </td></tr><tr><td>Spooling Directory Source</td><td>监控指定目录内数据变更     </td></tr><tr><td>Twitter 1% firehose Source</td><td>通过API持续下载Twitter数据，试验性质     </td></tr><tr><td>Netcat Source</td><td>监控某个端口，将流经端口的每一个文本行数据作为Event输入     </td></tr><tr><td>Sequence Generator Source</td><td>序列生成器数据源，生产序列数据     </td></tr><tr><td>Syslog Sources</td><td>读取syslog数据，产生Event，支持UDP和TCP两种协议     </td></tr><tr><td>HTTP Source</td><td>基于HTTP POST或GET方式的数据源，支持JSON、BLOB表示形式     </td></tr><tr><td>Legacy Sources</td><td>兼容老的Flume OG中Source（0.9.x版本）     </td></tr></tbody></table><p>Flume Channel 支持的类型：</p><table><thead><tr><th>Channel类型</th><th>说明</th></tr></thead><tbody><tr><td>Memory Channel</td><td>Event数据存储在内存中</td></tr><tr><td>JDBC Channel</td><td>Event数据存储在持久化存储中，当前Flume Channel内置支持Derby</td></tr><tr><td>File Channel</td><td>Event数据存储在磁盘文件中</td></tr><tr><td>Spillable Memory Channel</td><td>Event数据存储在内存中和磁盘上，当内存队列满了，会持久化到磁盘文件（当前试验性的，不建议生产环境使用）</td></tr><tr><td>Pseudo Transaction Channel</td><td>测试用途</td></tr><tr><td>Custom Channel</td><td>自定义Channel实现</td></tr></tbody></table><p>Flume Sink支持的类型</p><table><thead><tr><th>Sink类型</th><th>说明</th></tr></thead><tbody><tr><td>HDFS Sink</td><td>数据写入HDFS</td></tr><tr><td>Logger Sink</td><td>数据写入日志文件</td></tr><tr><td>Avro Sink</td><td>数据被转换成Avro Event，然后发送到配置的RPC端口上</td></tr><tr><td>Thrift Sink</td><td>数据被转换成Thrift Event，然后发送到配置的RPC端口上</td></tr><tr><td>IRC Sink</td><td>数据在IRC上进行回放</td></tr><tr><td>File Roll Sink</td><td>存储数据到本地文件系统</td></tr><tr><td>Null Sink</td><td>丢弃到所有数据</td></tr><tr><td>HBase Sink</td><td>数据写入HBase数据库</td></tr><tr><td>Morphline Solr Sink</td><td>数据发送到Solr搜索服务器（集群）</td></tr><tr><td>ElasticSearch Sink</td><td>数据发送到Elastic Search搜索服务器（集群）</td></tr><tr><td>Kite Dataset Sink</td><td>写数据到Kite Dataset，试验性质的</td></tr><tr><td>Custom Sink</td><td>自定义Sink实现</td></tr></tbody></table><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>kafka+zk环境搭建（略）</p><p>启动flume-ng：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/flume-ng agent -n agent -c conf -f conf/spool.conf -Dflume.root.logger=INFO,console</div></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-n 指定agent名称</li><li>-c 指定配置文件目录</li><li>-f 指定配置文件</li><li>-Dflume.root.logger=DEBUG,console 设置日志等级</li></ul><p>启动过程中，日志输出级别可以调高，方便及时发现错误</p><p>启动kafka消费者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-console-consumer.sh --zookeeper 103.15.202.158:2181 --topic test --from-beginning</div></pre></td></tr></table></figure><p>可以看到，输入到1.txt中的文件最后都会被消费者拿到。</p><h3 id="netcat源测试"><a href="#netcat源测试" class="headerlink" title="netcat源测试"></a>netcat源测试</h3><p>配置修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">agent.sources.src1.type = netcat</div><div class="line">agent.sources.src1.channels = ch1</div><div class="line">agent.sources.src1.bind = 192.168.202.162</div><div class="line">agent.sources.src1.port = 4141</div></pre></td></tr></table></figure></p><p>在终端向监听的端口发送消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;hello look hello hdfs&quot; | nc 192.168.202.162 4141</div></pre></td></tr></table></figure><p>kafka消费者可以拿到。</p><h3 id="sink：本地文件"><a href="#sink：本地文件" class="headerlink" title="sink：本地文件"></a>sink：本地文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#file_roll</div><div class="line">agent.sinks.sink1.type = file_roll</div><div class="line">agent.sinks.sink1.channel = ch1</div><div class="line">agent.sinks.sink1.sink.directory = /opt/data/flume</div></pre></td></tr></table></figure><p>还可设置文件生成时间间隔和文件名，详细见手册</p><h3 id="kafka到kafka"><a href="#kafka到kafka" class="headerlink" title="kafka到kafka"></a>kafka到kafka</h3><p>需要从其他业务线的kafka拉数据，存储到kafka中供消费使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">agent.sources = src1 </div><div class="line">agent.channels = ch1</div><div class="line">agent.sinks = sink1</div><div class="line"></div><div class="line"><span class="comment">#For each one of the sources</span></div><div class="line">agent.sources.src1.type = org.apache.flume.source.kafka.KafkaSource</div><div class="line">agent.sources.src1.channels = ch1</div><div class="line">agent.sources.src1.batchSize = 5000</div><div class="line">agent.sources.src1.batchDurationMillis = 2000</div><div class="line">agent.sources.src1.kafka.bootstrap.servers = 192.168.5.194:9092, 192.168.5.195:9092, 192.168.5.196:9092, 192.168.5.197:9092, 192.168.5.198:9092, 192.168.5.199:9092, 192.168.5.200:9092</div><div class="line">agent.sources.src1.kafka.topics = bf.bfsports.android.access.active, bf.bfsports.iphone.access.active</div><div class="line"></div><div class="line"><span class="comment">#interceptors </span></div><div class="line">agent.sources.src1.interceptors = i1</div><div class="line">agent.sources.src1.interceptors.i1.type = static</div><div class="line">agent.sources.src1.interceptors.i1.key = topic</div><div class="line">agent.sources.src1.interceptors.i1.preserveExisting = <span class="literal">false</span></div><div class="line">agent.sources.src1.interceptors.i1.value = bf.dt.log</div><div class="line"></div><div class="line"><span class="comment">#kafka</span></div><div class="line">agent.sinks.sink1.type = org.apache.flume.sink.kafka.KafkaSink</div><div class="line">agent.sinks.sink1.kafka.bootstrap.servers = 103.15.202.158:9092,103.15.202.159:9092</div><div class="line">agent.sinks.sink1.channel = ch1</div><div class="line"></div><div class="line"><span class="comment"># Each channel's type is defined.</span></div><div class="line">agent.channels.ch1.type = memory</div><div class="line">agent.channels.ch1.capacity = 10000</div><div class="line">agent.channels.ch1.transactionCapacity = 10000</div><div class="line">agent.channels.ch1.byteCapacityBufferPercentage = 20</div><div class="line">agent.channels.ch1.byteCapacity = 1800000</div></pre></td></tr></table></figure><p>配置的重点在于，会存在topic覆盖的问题，这里需要配置拦截器<a href="http://lxw1234.com/archives/2016/06/684.htm" target="_blank" rel="external">Flume中同时使用Kafka Source和Kafka Sink的Topic覆盖问题</a></p><h3 id="sink：hdfs"><a href="#sink：hdfs" class="headerlink" title="sink：hdfs"></a>sink：hdfs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">agent.sinks.sink1.channel = ch1 </div><div class="line">agent.sinks.sink1.type = hdfs</div><div class="line">agent.sinks.sink1.hdfs.path = hdfs://192.168.206.184:9000/flume/events/%y%m%d%H0000</div><div class="line">agent.sinks.sink1.hdfs.filePrefix = bfs_%y%m%d%H%M//文件名格式</div><div class="line">agent.sinks.sink1.hdfs.fileSuffix = .log//文件后缀名</div><div class="line">agent.sinks.sink1.hdfs.writeFormat = Text//文件格式</div><div class="line">agent.sinks.sink1.hdfs.fileType = DataStream//文件类型，还可设置为压缩格式</div><div class="line">agent.sinks.sink1.hdfs.useLocalTimeStamp = true</div><div class="line">agent.sinks.sink1.hdfs.rollInterval = 300 //等待多长时间之后写文件，并不是写文件的时间间隔</div><div class="line">agent.sinks.sink1.hdfs.roundUnit = second//写文件时间单位</div><div class="line">agent.sinks.sink1.hdfs.rollCount = 0 //可以按照日志条数t写文件</div><div class="line">agent.sinks.sink1.hdfs.rollSize = 0 //按照文件大小写文件</div><div class="line">agent.sinks.sink1.hdfs.minBlockReplicas = 1 //文件拷贝份数，所以这里只能设置为1</div><div class="line">agent.sinks.sink1.hdfs.round = true //时间单位设置</div><div class="line">agent.sinks.sink1.hdfs.roundValue = 10 //表示精确到10分钟</div><div class="line">agent.sinks.sink1.hdfs.roundUnit = minute //</div><div class="line">agent.sinks.sink1.hdfs.batchSize = 100 //没多少条日志，写一次hdfs</div><div class="line">agent.sinks.sink1.hdfs.threadsPoolSize = 10 //线程池个数</div></pre></td></tr></table></figure><p>minBlocakReplicas必须设置为1，见<a href="http://blog.csdn.net/simonchi/article/details/43231891" target="_blank" rel="external">【Flume】【源码分析】flume中sink到hdfs，文件系统频繁产生文件，文件滚动配置不起作用？</a><br>如果配置每五分钟写一个文件，则roundvalue精确到5分钟，同时rollinterval设置为5分钟。</p><p>参考：<br><a href="https://flume.apache.org/FlumeUserGuide.html" target="_blank" rel="external">flume-1.7官方用户手册</a><br><a href="http://tech.meituan.com/mt-log-system-arch.html" target="_blank" rel="external">基于Flume的美团日志收集系统(一)架构和设计</a><br><a href="http://blog.javachen.com/2014/07/22/flume-ng.html" target="_blank" rel="external">Flume-ng的原理和使用</a><br><a href="http://lxw1234.com/archives/2015/10/527.htm" target="_blank" rel="external">Flume中的HDFS Sink配置参数说明</a><br><a href="http://www.ltingzyong.cn/2016/12/20/flume%E6%95%B4%E5%90%88kafka%E5%92%8Chdfs%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/" target="_blank" rel="external">Flume整合kafka和hdfs出现的错误</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flume NG是Cloudera提供的一个分布式、可靠、可用的系统，它能够将不同数据源的海量日志数据进行高效收集、聚合、移动，最后存储到一个中心化数据存储系统中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HADOOP" scheme="http://mufool.com/tags/HADOOP/"/>
    
  </entry>
  
  <entry>
    <title>Kafka安装使用</title>
    <link href="http://mufool.com/2017/06/09/hadoop-kafka/"/>
    <id>http://mufool.com/2017/06/09/hadoop-kafka/</id>
    <published>2017-06-09T06:42:38.000Z</published>
    <updated>2017-09-11T02:48:21.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于kafka"><a href="#关于kafka" class="headerlink" title="关于kafka"></a>关于kafka</h2><p>Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群机来提供实时的消费。</p><a id="more"></a><h2 id="kafka架构"><a href="#kafka架构" class="headerlink" title="kafka架构"></a>kafka架构</h2><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p>下载kafka安装包，访问Kafka官网下载对应版本即可。(<a href="http://mufool.qiniudn.com/hadoop/zookeeper-3.4.9.tar.gz" target="_blank" rel="external">备用地址</a>)这里使用的版本为2.9.2-0.8.1.1。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf kafka_2.12-0.10.2.0.tgz</div></pre></td></tr></table></figure><p>修改配置文件，简单配置只需要修改/config/server.properties文件即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim config/server.properties</div></pre></td></tr></table></figure><p>需要修改的内容：</p><ul><li>broker.id：当前kafka服务的id</li><li>listeners、post：监听的客户端连接端口</li><li>log.dirs：kafka数据、索引存储位置</li><li>zookeeper.connect：kafka依赖的zookeeper服务地址<br>把配置好的kafka上传到其他节点上</li></ul><h2 id="启动Kafka"><a href="#启动Kafka" class="headerlink" title="启动Kafka"></a>启动Kafka</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-server-start.sh config/server.properties &amp;</div></pre></td></tr></table></figure><p>kafka服务启动完成后，执行jps，可以看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">28208 Kafka</div></pre></td></tr></table></figure><h2 id="测试kafka"><a href="#测试kafka" class="headerlink" title="测试kafka"></a>测试kafka</h2><p>创建topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-topics.sh -zookeeper 192.168.205.173:2181,192.168.204.237:2181 -topic <span class="built_in">test</span> -replication-factor 2 -partitions 1 -create</div></pre></td></tr></table></figure><ul><li>create：创建topic</li><li>zookeeper：连接的zookeeper节点地址</li><li>replication-factor：数据副本数量</li><li>partitions：对创建的topic进行分片</li><li>topic：要创建的topic名称</li></ul><p>查看topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-topics.sh -zookeeper 192.168.205.173:2181,192.168.204.237:2181 -list</div></pre></td></tr></table></figure><p>创建producer：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-console-producer.sh --broker-list nutch1:9092 --topic <span class="built_in">test</span></div></pre></td></tr></table></figure><ul><li>broker-list：此处不是zookeeper的地址，而是kafka客户端的地址</li><li>topic：向哪个topic发送消息</li></ul><p>创建consumer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-console-consumer.sh --bootstrap-server 192.168.205.173:9092 --topic <span class="built_in">test</span> --from-beginning</div></pre></td></tr></table></figure><ul><li>bootstrap-server：这里为topic地址，替换–zookeeper选项</li><li>from-beginning：kafka消息存储在文件内，能够重复消费，这里代表偏移量(offsets)</li><li>topic：从哪个topic消费消息</li></ul><h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-server-stop.sh</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于kafka&quot;&gt;&lt;a href=&quot;#关于kafka&quot; class=&quot;headerlink&quot; title=&quot;关于kafka&quot;&gt;&lt;/a&gt;关于kafka&lt;/h2&gt;&lt;p&gt;Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群机来提供实时的消费。&lt;/p&gt;
    
    </summary>
    
    
      <category term="KAFKA" scheme="http://mufool.com/tags/KAFKA/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper安装使用</title>
    <link href="http://mufool.com/2017/06/09/hadoop-zookeepr/"/>
    <id>http://mufool.com/2017/06/09/hadoop-zookeepr/</id>
    <published>2017-06-09T06:42:28.000Z</published>
    <updated>2017-09-12T02:06:06.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/stable/zookeeper-3.4.9.tar.gz</div><div class="line">tar -xzvf zookeeper-3.4.9.tar.gz</div></pre></td></tr></table></figure><a id="more"></a><p>复制配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd zookeeper-3.4.9</div><div class="line">cp conf/zoo_sample.cfg conf/zoo.cfg</div></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">vi conf/zoo.cfg</div><div class="line">dataDir=/opt/hadoop/zookeeper-3.4.9/data</div><div class="line">dataLogDir=/opt/hadoop/zookeeper-3.4.9/logs</div><div class="line">clientPort=2181</div><div class="line">tickTime=2000</div><div class="line">initLimit=5</div><div class="line">syncLimit=2</div><div class="line">server.1=HDP245:2888:3888</div><div class="line">server.2=HDP246:2888:3888</div><div class="line">server.3=HDP247:2888:3888</div></pre></td></tr></table></figure><p>在dataDir目录下创建myid文件，HDP245机器的内容为1，HDP246机器的内容为2，HDP247机器的内容为3，若有更多依此类推。</p><p>在HDP245的修改为： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /opt/hadoop/zookeeper-3.4.9/data/ </div><div class="line">echo 1 &gt; /opt/hadoop/zookeeper-3.4.9/data/myid</div></pre></td></tr></table></figure><p>在HDP246、HDP247上把“echo 1”的“1”改成对应的值。</p><ul><li>dataDir：数据目录</li><li>dataLogDir：日志目录</li><li>clientPort：客户端连接端口</li><li>tickTime：Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。</li><li>initLimit：Zookeeper的Leader 接受客户端（Follower）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 5个心跳的时间（也就是tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 5*2000=10 秒</li><li>syncLimit：表示 Leader 与 Follower 之间发送消息时请求和应答时间长度，最长不能超过多少个tickTime 的时间长度，总的时间长度就是 2*2000=4 秒。</li><li>server.A=B：C：D：其中A 是一个数字，表示这个是第几号服务器；B 是这个服务器的 ip 地址；C 表示的是这个服务器与集群中的 Leader 服务器交换信息的端口；D 表示的是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，所以要给它们分配不同的端口号。</li></ul><h2 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h2><p>接下来将上面的安装文件拷贝到集群中的其他机器上对应的目录下，拷贝完成后修改对应的机器上的myid,在每台上分别启动zookeeper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/zkServer.sh start</div></pre></td></tr></table></figure><p>查看是否启动成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost zookeeper-3.4.9]<span class="comment"># jps</span></div><div class="line">20880 Jps</div><div class="line">22929 SecondaryNameNode</div><div class="line">20852 QuorumPeerMain</div><div class="line">28328 RunJar</div><div class="line">22747 NameNode</div><div class="line">23086 ResourceManager</div><div class="line">22079 Master</div></pre></td></tr></table></figure><p>其中，QuorumPeerMain是zookeeper进程，启动正常。</p><h2 id="查看启动结果"><a href="#查看启动结果" class="headerlink" title="查看启动结果"></a>查看启动结果</h2><p>每台上执行bin/zkServer.sh status，可以查看选出了leader和follower</p><p>第一台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bin/zkServer.sh status</span></div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /opt/hdp/zookeeper-3.4.9/bin/../conf/zoo.cfg</div><div class="line">Mode: follower</div><div class="line"></div><div class="line">第二台</div><div class="line"></div><div class="line">```bash</div><div class="line"><span class="comment">#bin/zkServer.sh status</span></div><div class="line">ZooKeeper JMX enabled by default</div><div class="line">Using config: /opt/hdp/zookeeper-3.4.9/bin/../conf/zoo.cfg</div><div class="line">Mode: leader</div></pre></td></tr></table></figure><h2 id="连接zookeeper集群"><a href="#连接zookeeper集群" class="headerlink" title="连接zookeeper集群"></a>连接zookeeper集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">-rw-r--r--  1 root root    7922 Mar 14 18:28 zookeeper.out</div><div class="line">[root@BFG-OSER-1308 zookeeper-3.4.9]<span class="comment"># bin/zkCli.sh -server 192.168.204.237:2181</span></div><div class="line">Connecting to 192.168.204.237:2181</div><div class="line">2017-03-14 18:33:07,018 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.9-1757313, built on 08/23/2016 06:50 GMT</div><div class="line">2017-03-14 18:33:07,022 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=localhost</div><div class="line">2017-03-14 18:33:07,022 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_121</div><div class="line">2017-03-14 18:33:07,025 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation</div><div class="line">2017-03-14 18:33:07,025 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/opt/hdp/jdk1.8.0_121/jre</div><div class="line">2017-03-14 18:33:07,025 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/opt/hdp/zookeeper-3.4.9/bin/../build/classes:/opt/hdp/zookeeper-3.4.9/bin/../build/lib/*.jar:/opt/hdp/zookeeper-3.4.9/bin/../lib/slf4j-log4j12-1.6.1.jar:/opt/hdp/zookeeper-3.4.9/bin/../lib/slf4j-api-1.6.1.jar:/opt/hdp/zookeeper-3.4.9/bin/../lib/netty-3.10.5.Final.jar:/opt/hdp/zookeeper-3.4.9/bin/../lib/log4j-1.2.16.jar:/opt/hdp/zookeeper-3.4.9/bin/../lib/jline-0.9.94.jar:/opt/hdp/zookeeper-3.4.9/bin/../zookeeper-3.4.9.jar:/opt/hdp/zookeeper-3.4.9/bin/../src/java/lib/*.jar:/opt/hdp/zookeeper-3.4.9/bin/../conf::.:/opt/hdp/jdk1.8.0_121/lib:/opt/hdp/jdk1.8.0_121/jre/lib:.:/opt/hdp/jdk1.8.0_121/lib:/opt/hdp/jdk1.8.0_121/jre/lib</div><div class="line">2017-03-14 18:33:07,025 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/opt/hdp/hadoop-2.6.5/lib/native/:/opt/hdp/hadoop-2.6.5/lib/native/::/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</div><div class="line">2017-03-14 18:33:07,026 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp</div><div class="line">2017-03-14 18:33:07,026 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&lt;NA&gt;</div><div class="line">2017-03-14 18:33:07,026 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux</div><div class="line">2017-03-14 18:33:07,026 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64</div><div class="line">2017-03-14 18:33:07,026 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=2.6.32-642.11.1.el6.x86_64</div><div class="line">2017-03-14 18:33:07,026 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root</div><div class="line">2017-03-14 18:33:07,026 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root</div><div class="line">2017-03-14 18:33:07,026 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/opt/hdp/zookeeper-3.4.9</div><div class="line">2017-03-14 18:33:07,028 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=192.168.204.237:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain<span class="variable">$MyWatcher</span>@446cdf90</div><div class="line">Welcome to ZooKeeper!</div></pre></td></tr></table></figure><h2 id="停止zookeeper"><a href="#停止zookeeper" class="headerlink" title="停止zookeeper"></a>停止zookeeper</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/zkServer.sh stop</div></pre></td></tr></table></figure><h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[zk: 192.168.204.237:2181(CONNECTED) 0help</div><div class="line">GNU bash, version 4.1.2(2)-release (x86_64-redhat-linux-gnu)</div><div class="line">These shell commands are defined internally.  Type `<span class="built_in">help</span><span class="string">' to see this list.</span></div><div class="line"><span class="string">Type `help name'</span> to find out more about the <span class="keyword">function</span> `name<span class="string">'.</span></div><div class="line"><span class="string">Use `info bash'</span> to find out more about the shell <span class="keyword">in</span> general.</div><div class="line">Use `man -k<span class="string">' or `info'</span> to find out more about commands not <span class="keyword">in</span> this list.</div><div class="line"></div><div class="line">A star (*) next to a name means that the <span class="built_in">command</span> is disabled.</div></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">#查看集群/目录内容</div><div class="line">[zk: 192.168.204.237:2181(CONNECTED) 1] ls /</div><div class="line">[zookeeper]</div><div class="line"></div><div class="line">#创建node节点</div><div class="line">[zk: 192.168.204.237:2181(CONNECTED) 2] create /node test</div><div class="line">Created /node</div><div class="line"></div><div class="line">#再查看/目录内容</div><div class="line">[zk: 192.168.204.237:2181(CONNECTED) 5] ls /</div><div class="line">[node, zookeeper]</div><div class="line"></div><div class="line">#查看node中数据信息</div><div class="line">[zk: 192.168.204.237:2181(CONNECTED) 7] get /node</div><div class="line">test</div><div class="line">cZxid = 0x100000004</div><div class="line">ctime = Tue Mar 14 18:38:49 CST 2017</div><div class="line">mZxid = 0x100000004</div><div class="line">mtime = Tue Mar 14 18:38:49 CST 2017</div><div class="line">pZxid = 0x100000004</div><div class="line">cversion = 0</div><div class="line">dataVersion = 0</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 4</div><div class="line">numChildren = 0</div><div class="line"></div><div class="line">#更改node中数据信息</div><div class="line">[zk: 192.168.204.237:2181(CONNECTED) 8] set /node baofengcloud</div><div class="line">cZxid = 0x100000004</div><div class="line">ctime = Tue Mar 14 18:38:49 CST 2017</div><div class="line">mZxid = 0x100000005</div><div class="line">mtime = Tue Mar 14 18:46:56 CST 2017</div><div class="line">pZxid = 0x100000004</div><div class="line">cversion = 0</div><div class="line">dataVersion = 1</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 12</div><div class="line">numChildren = 0</div><div class="line"></div><div class="line">#再次查看node中数据已更改</div><div class="line">[zk: 192.168.204.237:2181(CONNECTED) 9] get /node</div><div class="line">baofengcloud</div><div class="line">cZxid = 0x100000004</div><div class="line">ctime = Tue Mar 14 18:38:49 CST 2017</div><div class="line">mZxid = 0x100000005</div><div class="line">mtime = Tue Mar 14 18:46:56 CST 2017</div><div class="line">pZxid = 0x100000004</div><div class="line">cversion = 0</div><div class="line">dataVersion = 1</div><div class="line">aclVersion = 0</div><div class="line">ephemeralOwner = 0x0</div><div class="line">dataLength = 12</div><div class="line">numChildren = 0</div><div class="line"></div><div class="line">#删除node</div><div class="line">[zk: 192.168.204.237:2181(CONNECTED) 10] delete /node</div><div class="line">[zk: 192.168.204.237:2181(CONNECTED) 11] ls /</div><div class="line">[zookeeper]</div><div class="line"></div><div class="line">#退出</div><div class="line">[zk: 192.168.204.237:2181(CONNECTED) 12] quit</div><div class="line">Quitting...</div><div class="line">2017-03-14 18:47:19,797 [myid:] - INFO  [main:ZooKeeper@684] - Session: 0x25acc5905670001 closed</div><div class="line">2017-03-14 18:47:19,799 [myid:] - INFO  [main-EventThread:ClientCnxn$EventThread@519] - EventThread shut down for session: 0x25acc5905670001</div></pre></td></tr></table></figure><p>参考：<br><a href="http://blog.fens.me/hadoop-zookeeper-intro/" target="_blank" rel="external">ZooKeeper伪分布式集群安装及使用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/stable/zookeeper-3.4.9.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;tar -xzvf zookeeper-3.4.9.tar.gz&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="HADOOP" scheme="http://mufool.com/tags/HADOOP/"/>
    
  </entry>
  
  <entry>
    <title>Spark on yarn提交慢解决方法</title>
    <link href="http://mufool.com/2017/06/09/hadoop-spark-yarn/"/>
    <id>http://mufool.com/2017/06/09/hadoop-spark-yarn/</id>
    <published>2017-06-09T06:42:16.000Z</published>
    <updated>2017-09-11T02:35:03.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">17/04/18 11:21:08 WARN Client: Neither spark.yarn.jars nor spark.yarn.archive is <span class="built_in">set</span>, falling back to uploading libraries under SPARK_HOME.</div></pre></td></tr></table></figure><a id="more"></a><p>spark on yarn提交慢，且提交时有warning提示，大意是：如果想要在yarn端（yarn的节点）访问spark的runtime jars，需要指定spark.yarn.archive 或者 spark.yarn.jars。如果都这两个参数都没有指定，spark就会把$SPARK_HOME/jars/所有的jar上传到分布式缓存中。这也是之前任务提交特别慢的原因。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>将$SPARK_HOME/jars/* 下spark运行依赖的jar上传到hdfs上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hadoop fs -mkdir -p /tmp/spark/jars/</div><div class="line">hadoop fs -put  /opt/hadoop/spark-2.1.0/jars/* /tmp/spark/jars/</div></pre></td></tr></table></figure><p>vi $SPARK_HOME/conf/spark-defaults.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spark.yarn.jars  hdfs://master:9000/tmp/spark/jars/*.jar</div></pre></td></tr></table></figure><p>再次提交，变快。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;17/04/18 11:21:08 WARN Client: Neither spark.yarn.jars nor spark.yarn.archive is &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;, falling back to uploading libraries under SPARK_HOME.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="HADOOP" scheme="http://mufool.com/tags/HADOOP/"/>
    
      <category term="SPARK" scheme="http://mufool.com/tags/SPARK/"/>
    
  </entry>
  
  <entry>
    <title>Maven下载慢的解决方法</title>
    <link href="http://mufool.com/2017/06/09/hadoop-mvn-slow/"/>
    <id>http://mufool.com/2017/06/09/hadoop-mvn-slow/</id>
    <published>2017-06-09T06:42:05.000Z</published>
    <updated>2017-09-11T02:21:15.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Maven仓库默认下载速度很慢，非常影响项目的开发速度和构建速度。</p><a id="more"></a><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="使用Nexus搭建私服"><a href="#使用Nexus搭建私服" class="headerlink" title="使用Nexus搭建私服"></a>使用Nexus搭建私服</h3><p>使用Nexus搭建私服的问题在于，如果是第一次构建，仍然会比较慢，它适用于团队。</p><h3 id="更换镜像仓库"><a href="#更换镜像仓库" class="headerlink" title="更换镜像仓库"></a>更换镜像仓库</h3><p>镜像仓库则比较适用于个人，可以利用国内其他人搭建的maven库，加速下载。这里使用的是阿里云的镜像仓库。</p><p>在maven的setting.xml里配置mirrors的子节点，添加如下可用的镜像仓库的mirror：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- mirror</span></div><div class="line"><span class="comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span></div><div class="line"><span class="comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></div><div class="line"><span class="comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></div><div class="line"><span class="comment">   |</span></div><div class="line"><span class="comment">  &lt;mirror&gt;</span></div><div class="line"><span class="comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span></div><div class="line"><span class="comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></div><div class="line"><span class="comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></div><div class="line"><span class="comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></div><div class="line"><span class="comment">  &lt;/mirror&gt;</span></div><div class="line"><span class="comment">   --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="配置默认仓库地址"><a href="#配置默认仓库地址" class="headerlink" title="配置默认仓库地址"></a>配置默认仓库地址</h2><p>在pom.xml中也使用aliyu的仓库<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Repository Switchboard<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;url&gt;http://repo.akka.io/releases&lt;/url&gt;  --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;Maven仓库默认下载速度很慢，非常影响项目的开发速度和构建速度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HADOOP" scheme="http://mufool.com/tags/HADOOP/"/>
    
  </entry>
  
</feed>
